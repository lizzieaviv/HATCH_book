---
title: "6-Month Postpartum"
subtitle: "Inventory Cleaning"
format:
  html:
    toc: true
    toc-float: true
    df-print: paged
    code-folding: show
editor_options: 
  markdown: 
    wrap: 72
---

# To Do List

## Specific measures

-   ASQ cronbach's alphas are low (.4-.7)
-   PBQ anxiety scale has low cronbach alpha (.549)
-   MRI_PYB has very low cronbach alpha (0-.3). We changed the Likert
    Scale.
-   MRI_PSQI has negative cronbach alpha (something is wrong??)

# Set Up

::: panel-tabset
## Notes

**SPSS File Name:** HATCH Syntax for Postpartum Qs updated 6.4.21.sps

**Qualtrics File Name:** 6pp_HATCH Postpartum Survey 11.16.2017

**Qualtrics File Name:**
6ppCOVID_HATCH_Postpartum_MRI_COVID-19_Questionnaire

## Packages

```{r}
#| warning: false
#| message: false

library(tidyverse) # for data cleaning
library(here) # to quickly find data files
library(haven); library(labelled) # to manipulate SPSS files and add SPSS-style labels
library(chron) # to manipulate time and date variables
library(sjmisc) # for rowwise functions (row_count function)
library(data.table) # for renaming variables (setnames function)
library(kableExtra) # to print tables more neatly (kbl wrapping function) 
library(nestclean) # the package I wrote to help check our work
library(nestPSQI) # the package I wrote to help clean up PSQI
```

## Load Data

```{r}
df <- read_sav(here("data/4_demographics", "6pp_demo.sav")) %>%
  mutate(across(where(is.character), ~ na_if(.x, ""))) # replace blank cells with NA

df.old <- df # so that I can refresh df quickly without scrolling back to top 
```
:::

# Inventories

## AAS: Adult Attachment Scale

::::: panel-tabset
### Notes

-   Collins, 1996
-   18 items
-   1-5 Likert Scale
    -   1 = Not at all characteristic of me
    -   5 = Very characteristic of me
-   Mean scores
    -   Higher close: more comfort with closeness
    -   Higher depend: more comfort depending on others
    -   Higher anxiety: more anxiety about rejection/abandonment
-   Subscales
    -   Close: 1, 6, 8R, 12, 13R, 17R
    -   Depend: 2R, 5, 7R, 14, 16R, 18R
    -   Anxiety: 3, 4, 9, 10, 11, 15
-   Reverse score: 2, 7, 8, 13, 16, 17, 18

### Script

#### Reverse item scores

```{r AAS-reverse}
# Reverse code questions 2,7,8,13,16,17,18
df <- df %>%
  mutate(across(c(AAS2.6pp, AAS7.6pp, AAS8.6pp, 
                   AAS13.6pp, AAS16.6pp:AAS18.6pp), 
            ~ 6-.))


# Mark reversed scores with `_r`
setnames(x = df, 
                     old = c("AAS2.6pp", "AAS7.6pp", "AAS8.6pp",
                             "AAS13.6pp","AAS16.6pp", "AAS17.6pp",  "AAS18.6pp"), 
                     new = gsub(pattern = ".6pp", 
                          replacement = "_r.6pp", 
                          x = c("AAS2.6pp", "AAS7.6pp", "AAS8.6pp",
                             "AAS13.6pp","AAS16.6pp", "AAS17.6pp",  "AAS18.6pp")))
```

#### Calculate summary scores

```{r AAS-scales}
df <- df %>%
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(c(AAS1.6pp:AAS18_r.6pp), as.numeric)) %>%
  
  # Calculate subscales
  mutate(AAS_close.6pp = round(mean(c(AAS1.6pp, AAS6.6pp, AAS8_r.6pp,
                                  AAS12.6pp, AAS13_r.6pp, AAS17_r.6pp),
                                   na.rm = F), 3),
         AAS_dep.6pp = round(mean(c(AAS2_r.6pp, AAS5.6pp, AAS7_r.6pp,
                                  AAS14.6pp, AAS16_r.6pp, AAS18_r.6pp),
                                   na.rm = F), 3),
         AAS_anx.6pp = round(mean(c(AAS3.6pp, AAS4.6pp, AAS9.6pp,
                                  AAS10.6pp, AAS11.6pp, AAS15.6pp),
                                   na.rm = F),3)) %>%

  
  # Move the subscales so they come immediately after the measures
  relocate(c(AAS_close.6pp:AAS_anx.6pp), .after = AAS18_r.6pp) 
```

### Label

```{r}
df <- df %>%
  mutate(across(c(contains("AAS"), -contains("_r")), 
            ~ labelled(., c("Not at all characteristic of me" = 1, 
                            "Somewhat uncharaceristic of me" = 2, 
                            "Neither characteristic/uncharacteristic of me" = 3, 
                            "Somewhat characteristic of me" = 4, 
                            "Very characteristic of me" = 5), 
                       label = "Adult Attachment Scale"))) %>%
  mutate(across(c(contains("AAS") & contains("_r")), 
            ~ labelled(., c("Not at all characteristic of me" = 5, 
                            "Somewhat uncharaceristic of me" = 4, 
                            "Neither characteristic/uncharacteristic of me" = 3, 
                            "Somewhat characteristic of me" = 2, 
                            "Very characteristic of me" = 1), 
                       label = "Adult Attachment Scale (reverse-scored)"))) %>%
  mutate(AAS_close.6pp = labelled(AAS_close.6pp, label = "AAS: Comfort with closeness and intimacy"),
         AAS_dep.6pp = labelled(AAS_dep.6pp, label = "AAS: Extent person can depend on others"), 
         AAS_anx.6pp = labelled(AAS_anx.6pp, label = "AAS: Anxiety about being abandoned")) 
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false

# Direct Score
check_categorical(df, contains("AAS") & !contains("_")) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("AAS") & contains("_r")) %>% knitr::kable()

```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, AAS_close.6pp:AAS_anx.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Close

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(AAS1.6pp, AAS6.6pp, AAS8_r.6pp,
                                  AAS12.6pp, AAS13_r.6pp, AAS17_r.6pp)), na.rm = T)
```

###### Depend

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(AAS2_r.6pp, AAS5.6pp, AAS7_r.6pp,
                                  AAS14.6pp, AAS16_r.6pp, AAS18_r.6pp)), na.rm = T)
```

###### Anxiety

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(AAS3.6pp, AAS4.6pp, AAS9.6pp,
                                  AAS10.6pp, AAS11.6pp, AAS15.6pp)), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, AAS1.6pp:AAS_anx.6pp)
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, AAS1.6pp:AAS_anx.6pp)
```
::::
:::::

## ASQ6: Ages and Stages Questionnaire, 6-month

::::: panel-tabset
### Notes

-   Squires & Bricker, 2009
-   6 questions per developmental domain + 8-9 additional overall
    questions
-   For developmental questions: 3-point Likert scale
    -   0 = not yet
    -   5 = sometimes
    -   10 = yes
-   For overall questions: 0-1 binary
    -   0 = no
    -   1 = not yet
-   Sum scores
    -   Higher scores = more advanced development
-   Subscales:
    -   Communication
    -   Gross motor
    -   Fine motor
    -   Problem solving
    -   Personal/social
    -   Overall questions do not produce a subscale score
-   No reverse scores
-   Other scores notes:
    -   If three or more items are missing, do not score the
        area—screening results may not be accurate.
    -   If one or two items are missing, you will need to calculate an
        adjusted score.
        -   Replace missing items with mean score of other items in the
            section
    -   Refer to scoring guidelines for cut-off information and
        information on "overall" items

### Script

#### Recode item scores

```{r}
df <- df %>%
  # Yes, Sometimes, Not Yet
  mutate(across(c(ASQ6_c1.6pp:ASQ6_s6.6pp), 
            ~case_when( 
                        . == 1 ~ 10,
                        . == 3 ~ 5,
                        . == 2 ~ 0,
                        .default = NA))) %>%
  # Yes/No
  mutate(across(c(ASQ6_o1.6pp:ASQ6_o6.6pp),
            ~case_when(
              . == 9 ~ 1,
              . == 10 ~ 0,
              .default = NA)))
```

#### Mean-replace missing items

```{r}
df <- df %>%
  
  # Tell R that we want to work across a row
  rowwise() %>%
  
  # Find rows with 2 or fewer NAs and replace NA with subscale mean
  mutate(across(ASQ6_c1.6pp:ASQ6_c6.6pp, 
            ~ case_when(
              is.na(.) == T & sum(is.na(c_across(ASQ6_c1.6pp:ASQ6_c6.6pp))) <= 2 ~ mean(c_across(ASQ6_c1.6pp:ASQ6_c6.6pp), na.rm = T), 
              .default = .))) %>%
  mutate(across(ASQ6_gm1.6pp:ASQ6_gm6.6pp, 
            ~ case_when(
              is.na(.) == T & sum(is.na(c_across(ASQ6_gm1.6pp:ASQ6_gm6.6pp))) <= 2 ~ mean(c_across(ASQ6_gm1.6pp:ASQ6_gm6.6pp), na.rm = T), 
              .default = .))) %>%
  mutate(across(ASQ6_fm1.6pp:ASQ6_fm6.6pp, 
            ~ case_when(
              is.na(.) == T & sum(is.na(c_across(ASQ6_fm1.6pp:ASQ6_fm6.6pp))) <= 2 ~ mean(c_across(ASQ6_fm1.6pp:ASQ6_fm6.6pp), na.rm = T), 
              .default = .))) %>%
  mutate(across(ASQ6_ps1.6pp:ASQ6_ps6.6pp, 
            ~ case_when(
              is.na(.) == T & sum(is.na(c_across(ASQ6_ps1.6pp:ASQ6_ps6.6pp))) <= 2 ~ mean(c_across(ASQ6_ps1.6pp:ASQ6_ps6.6pp), na.rm = T), 
              .default = .))) %>%
  mutate(across(ASQ6_s1.6pp:ASQ6_s6.6pp, 
            ~ case_when(
              is.na(.) == T & sum(is.na(c_across(ASQ6_s1.6pp:ASQ6_s6.6pp))) <= 2 ~ mean(c_across(ASQ6_s1.6pp:ASQ6_s6.6pp), na.rm = T), 
              .default = .)))
  
```

#### Calculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the sum across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(ASQ6_comm.6pp = sum(c_across(ASQ6_c1.6pp:ASQ6_c6.6pp), na.rm = T),
         ASQ6_gross.6pp = sum(c_across(ASQ6_gm1.6pp:ASQ6_gm6.6pp), na.rm = T),
         ASQ6_fine.6pp = sum(c_across(ASQ6_fm1.6pp:ASQ6_fm6.6pp), na.rm = T),
         ASQ6_probsolve.6pp = sum(c_across(ASQ6_ps1.6pp:ASQ6_ps6.6pp), na.rm = T),
         ASQ6_social.6pp = sum(c_across(ASQ6_s1.6pp:ASQ6_s6.6pp), na.rm = T)) %>% 
  
  # Replace 0's with NA
  mutate(across(ASQ6_comm.6pp:ASQ6_social.6pp, ~na_if(., 0))) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(ASQ6_comm.6pp:ASQ6_social.6pp, .after = ASQ6_o6.6pp)
```

### Label

```{r}
df <- df %>% 
  
  # Tell R that scores are numeric
  mutate(across(ASQ6_c1.6pp:ASQ6_s6.6pp, as.numeric)) %>%
  
  # Create value and variable labels
  mutate(across(ASQ6_c1.6pp:ASQ6_c6.6pp,
            ~ labelled(., 
                       c("Yes" = 10, "Sometimes" = 5, "Not yet" = 0, 
                         "Mean-replaced" = 2.5, "Mean-replaced" = 4, 
                         "Mean-replaced" = 6, "Mean-replaced" = 7,
                         "Mean-replaced" = 8, "Mean-replaced" = 9), 
                       label = "ASQ 6-Month: Communication"))) %>%
  mutate(across(ASQ6_gm1.6pp:ASQ6_gm6.6pp,
            ~ labelled(., 
                       c("Yes" = 10, "Sometimes" = 5, "Not yet" = 0, 
                         "Mean-replaced" = 2.5, "Mean-replaced" = 4, 
                         "Mean-replaced" = 6, "Mean-replaced" = 7,
                         "Mean-replaced" = 8, "Mean-replaced" = 9), 
                       label = "ASQ 6-Month: Gross Motor"))) %>% 
  mutate(across(ASQ6_fm1.6pp:ASQ6_fm6.6pp,
            ~ labelled(., 
                       c("Yes" = 10, "Sometimes" = 5, "Not yet" = 0, 
                         "Mean-replaced" = 2.5, "Mean-replaced" = 4, 
                         "Mean-replaced" = 6, "Mean-replaced" = 7,
                         "Mean-replaced" = 8, "Mean-replaced" = 9), 
                       label = "ASQ 6-Month: Fine Motor"))) %>% 
  mutate(across(ASQ6_ps1.6pp:ASQ6_ps6.6pp,
            ~ labelled(., 
                       c("Yes" = 10, "Sometimes" = 5, "Not yet" = 0, 
                         "Mean-replaced" = 2.5, "Mean-replaced" = 4, 
                         "Mean-replaced" = 6, "Mean-replaced" = 7,
                         "Mean-replaced" = 8, "Mean-replaced" = 9),  
                       label = "ASQ 6-Month: Problem Solving"))) %>% 
  mutate(across(ASQ6_s1.6pp:ASQ6_s6.6pp,
            ~ labelled(., 
                       c("Yes" = 10, "Sometimes" = 5, "Not yet" = 0, 
                         "Mean-replaced" = 2.5, "Mean-replaced" = 4, 
                         "Mean-replaced" = 6, "Mean-replaced" = 7,
                         "Mean-replaced" = 8, "Mean-replaced" = 9), 
                       label = "ASQ 6-Month: Personal-Social"))) %>%
  mutate(across(ASQ6_o1.6pp:ASQ6_o6.6pp,
            ~ labelled(., 
                       c("Yes" = 1, "No" = 0), 
                       label = "ASQ 6-Month: Overall"))) %>%
  mutate(ASQ6_comm.6pp = labelled(ASQ6_comm.6pp, label = "ASQ 6-Month: Communication"), 
         ASQ6_gross.6pp = labelled(ASQ6_gross.6pp, label = "ASQ 6-Month: Gross Motor"),
         ASQ6_fine.6pp = labelled(ASQ6_fine.6pp, label = "ASQ 6-Month: Fine Motor"), 
         ASQ6_probsolve.6pp = labelled(ASQ6_probsolve.6pp, label = "ASQ 6-Month: Problem Solving"), 
         ASQ6_social.6pp = labelled(ASQ6_social.6pp, label = "ASQ 6-Month: Personal-Social"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, c(ASQ6_c1.6pp:ASQ6_s6.6pp)) %>% arrange(value) %>% knitr::kable()
check_categorical(df, c(ASQ6_o1.6pp:ASQ6_o6.6pp)) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, ASQ6_comm.6pp:ASQ6_social.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Communication Subscale

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, ASQ6_c1.6pp:ASQ6_c6.6pp), na.rm = T)
```

###### Gross Motor Subscale

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, ASQ6_gm1.6pp:ASQ6_gm6.6pp), na.rm = T)
```

###### Fine Motor Subscale

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, ASQ6_fm1.6pp:ASQ6_fm6.6pp), na.rm = T)
```

###### Problem Solving Subscale

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, ASQ6_ps1.6pp:ASQ6_ps6.6pp), na.rm = T)
```

###### Personal/Social Subscale

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, ASQ6_s1.6pp:ASQ6_s6.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("ASQ6")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("ASQ6"))
```
::::
:::::

## BCQ: Baby Care Questionnaire

::::: panel-tabset
### Notes

-   Winstanley & Gattis, 2013
-   30 items
    -   3 sections: Sleeping, Feeding, Soothing
-   1-4 Likert scale
    -   1=strongly disagree
    -   4=strongly agree
-   Mean scores
    -   Higher scores = higher structure/attunement
-   Subscales:
    -   Structure
        -   S1-S6
        -   E1-E3, E6, E7, E10
        -   So1, So2, So4, So9, So10
    -   Attunement
        -   S7-S9
        -   E4, E5, E8, E9
        -   So3, So5, So6-So8, So11
-   Reverse score for
    -   S1-S3, S9
    -   E2, E3, E5, E6, E9, E10
    -   So2-So5, So7, So10

### Script

#### Reverse item scores

```{r}
df <- df %>%
  mutate(across(c(BCQ_S1.6pp:BCQ_S3.6pp, BCQ_S9.6pp, 
                  BCQ_E2.6pp, BCQ_E3.6pp, BCQ_E5.6pp, BCQ_E6.6pp, BCQ_E9.6pp, BCQ_E10.6pp,
                  BCQ_So2.6pp:BCQ_So5.6pp, BCQ_So7.6pp, BCQ_So10.6pp),
                ~ 5 -.))

setnames(x = df, 
         old = c("BCQ_S1.6pp", "BCQ_S2.6pp", "BCQ_S3.6pp","BCQ_S9.6pp",
                 "BCQ_E2.6pp", "BCQ_E3.6pp", "BCQ_E5.6pp", "BCQ_E6.6pp", "BCQ_E9.6pp", "BCQ_E10.6pp",
                 "BCQ_So2.6pp", "BCQ_So3.6pp", "BCQ_So4.6pp", "BCQ_So5.6pp", "BCQ_So7.6pp", "BCQ_So10.6pp"), 
         new = gsub(pattern = ".6pp", 
                    replacement = "_r.6pp", 
                    x = c("BCQ_S1.6pp", "BCQ_S2.6pp", "BCQ_S3.6pp","BCQ_S9.6pp",
                 "BCQ_E2.6pp", "BCQ_E3.6pp", "BCQ_E5.6pp", "BCQ_E6.6pp", "BCQ_E9.6pp", "BCQ_E10.6pp",
                 "BCQ_So2.6pp", "BCQ_So3.6pp", "BCQ_So4.6pp", "BCQ_So5.6pp", "BCQ_So7.6pp", "BCQ_So10.6pp")))
```

#### Calculate summary scores

```{r}
df <- df %>%  
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(BCQ_structure.6pp = round(mean(c(c_across(BCQ_S1_r.6pp:BCQ_S6.6pp), 
                                          BCQ_E1.6pp, BCQ_E2_r.6pp, BCQ_E3_r.6pp, BCQ_E6_r.6pp, BCQ_E7.6pp, BCQ_E10_r.6pp, 
                                          BCQ_So1.6pp, BCQ_So2_r.6pp, BCQ_So4_r.6pp, BCQ_So9.6pp, BCQ_So10_r.6pp),
                                        na.rm = T), 3)) %>%
  mutate(BCQ_attune.6pp = round(mean(c(c_across(BCQ_S7.6pp:BCQ_S9_r.6pp), 
                                       BCQ_E4.6pp, BCQ_E5_r.6pp, BCQ_E8.6pp, BCQ_E9_r.6pp, 
                                       BCQ_So3_r.6pp, c_across(BCQ_So5_r.6pp:BCQ_So8.6pp), BCQ_So11.6pp),
                                        na.rm = T), 3)) %>%
  
  # Convert NaN to NA
  mutate(across(BCQ_structure.6pp:BCQ_attune.6pp, ~coalesce(., NA_real_))) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(BCQ_structure.6pp, BCQ_attune.6pp, .after = BCQ_So11.6pp)
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(c(contains("BCQ") & !contains("_r") & !contains("structure") & !contains("attune")),
            ~ labelled(., 
                     c("Strongly agree" = 4, 
                       "Agree" = 3, 
                       "Disagree" = 2, 
                       "Strongly Disagree" = 1), 
                     label = "Baby-Care Questionnaire"))) %>%
  
  mutate(across(c(contains("BCQ") & contains("_r")),
            ~ labelled(., 
                     c("Strongly agree" = 1, 
                       "Agree" = 2, 
                       "Disagree" = 3, 
                       "Strongly Disagree" = 4), 
                     label = "Baby-Care Questionnaire (reverse-coded)"))) %>%
  mutate(BCQ_structure.6pp = labelled(BCQ_structure.6pp, label = "BCQ: Structure"), 
         BCQ_attune.6pp = labelled(BCQ_attune.6pp, label = "BCQ: Attunement"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Direct Score
check_categorical(df, contains("BCQ") & !contains("_r") & !contains("structure") & !contains("attune")) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("BCQ") & contains("_r")) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, BCQ_structure.6pp:BCQ_attune.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Structure Subscale

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(BCQ_S1_r.6pp:BCQ_S6.6pp, 
                                          BCQ_E1.6pp, BCQ_E2_r.6pp, BCQ_E3_r.6pp, BCQ_E6_r.6pp, BCQ_E7.6pp, BCQ_E10_r.6pp, 
                                          BCQ_So1.6pp, BCQ_So2_r.6pp, BCQ_So4_r.6pp, BCQ_So9.6pp, BCQ_So10_r.6pp)), na.rm = T)
```

###### Attunement Subscale

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(BCQ_S7.6pp:BCQ_S9_r.6pp, 
                                       BCQ_E4.6pp, BCQ_E5_r.6pp, BCQ_E8.6pp, BCQ_E9_r.6pp, 
                                       BCQ_So3_r.6pp, BCQ_So5_r.6pp:BCQ_So8.6pp, BCQ_So11.6pp)), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("BCQ")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("BCQ"))
```
::::
:::::

## BDI: Beck Depression Inventory

::::: panel-tabset
### Notes

-   Beck, 1996
-   21 items
    -   We removed item 9 for IRB purposes (suicidality)
-   0-3 Likert scale (different anchor labels for each question)
-   Sum score
    -   Higher score = more depressive symptoms
-   No subscales
-   No reverse scores

### Script

#### Recode item scores

```{r}
df <- df %>%
# Code Items 1-15, 17, 19-21
  mutate(across(c(BDI1.6pp:BDI15.6pp, BDI17.6pp, BDI19.6pp:BDI21.6pp), 
            ~ case_when(
              . == 1 ~ 0, 
              . == 2 ~ 1, 
              . == 3 ~ 2,
              . == 4 ~ 3, 
              .default = NA))) %>%
  
  # Code Items 16, 18
  mutate(across(c(BDI16.6pp, BDI18.6pp), 
            ~ case_when(
              . == 1 ~ 0, 
              . == 2 | . == 3 ~ 1, 
              . == 4 | . == 5 ~ 2, 
              . == 6 | . == 7 ~ 3, 
              .default = NA)))
```

#### Calculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(c(BDI1.6pp:BDI21.6pp), as.numeric)) %>%
  
  # Calculate total score
  mutate(BDI_tot.6pp = sum(c_across(BDI1.6pp:BDI21.6pp))) %>%
  
  # Move the total score so they come immediately after the measures
  relocate(BDI_tot.6pp, .after = BDI21.6pp) 
```

### Label

```{r}
df <- df %>%
  mutate(across(contains("BDI"), ~labelled(., label = "Beck Depression Inventory"))) %>%
  
  mutate(BDI_tot.6pp = labelled(BDI_tot.6pp, label = "Beck Depression Inventory: Total")) 
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, BDI1.6pp:BDI21.6pp) %>% select(-label) %>% arrange(value) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, BDI_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, BDI1.6pp:BDI21.6pp), 
                    CI = T, 
                    na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, BDI1.6pp:BDI_tot.6pp)
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("BDI"))
```
::::
:::::

## COPE: Brief Cope

::::: panel-tabset
### Notes

-   Carver, 1997
-   28 items
-   1-4 Likert Scale
    -   1 = I don't do this at all
    -   4 = I do this all the time
-   Sum scores
    -   Higher scores = more behaviors related to the subscale
-   14 subscales:
    -   Self-Distraction (1 and 19)
    -   Active Coping (2 and 7)
    -   Denial (3 and 8)
    -   Substance Use (4 and 11)
    -   Using Emotional Support (5 and 15)
    -   Using Instrumental Support (10 and 23)
    -   Behavior Disengagement (6 and 16)
    -   Venting (9 and 21)
    -   Positive Reframing (12 and 17)
    -   Planning (14 and 25)
    -   Humor (18 and 28)
    -   Acceptance (20 and 24)
    -   Religion (22 and 27)
    -   Self-Blame (13 and 26)
-   Reverse score: none

### Script

#### Calculate summary scores

```{r COPE-scales}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(c(COPE1.6pp:COPE28.6pp), as.numeric)) %>%
  
  # Calculate total scores/subscales
  mutate(COPE_dist.6pp = sum(c(COPE1.6pp, COPE19.6pp)), 
         COPE_act.6pp = sum(c(COPE2.6pp, COPE7.6pp)),
         COPE_den.6pp = sum(c(COPE3.6pp, COPE8.6pp)),
         COPE_sub.6pp = sum(c(COPE4.6pp, COPE11.6pp)),
         COPE_emo.6pp = sum(c(COPE5.6pp, COPE15.6pp)),
         COPE_inst.6pp = sum(c(COPE10.6pp, COPE23.6pp)),
         COPE_diseng.6pp = sum(c(COPE6.6pp, COPE16.6pp)),
         COPE_vent.6pp = sum(c(COPE9.6pp, COPE21.6pp)),
         COPE_reframe.6pp = sum(c(COPE12.6pp, COPE17.6pp)),
         COPE_plan.6pp = sum(c(COPE14.6pp, COPE25.6pp)),
         COPE_hum.6pp = sum(c(COPE18.6pp, COPE28.6pp)),
         COPE_acc.6pp = sum(c(COPE20.6pp, COPE24.6pp)),
         COPE_rel.6pp = sum(c(COPE22.6pp, COPE27.6pp)),
         COPE_blame.6pp = sum(c(COPE13.6pp, COPE26.6pp))
         ) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(c(COPE_dist.6pp:COPE_blame.6pp), .after = COPE28.6pp)
```

### Label

```{r}
df <- df %>%
  mutate(across(contains("COPE") & !contains("_"), 
            ~ labelled(., 
                       c("I don't do this at all" = 1, 
                         "I do this a little bit" = 2, 
                         "I do this a medium amount" = 3, 
                         "I do this a lot" = 4), 
                       label = "Brief Cope Scale"))) %>%
  mutate(across(COPE_dist.6pp, ~labelled(.x, label = "Cope: Self-Distraction")), 
         across(COPE_act.6pp, ~labelled(.x, label = "Brief Cope: Active Coping")),
         across(COPE_den.6pp, ~labelled(.x, label = "Brief Cope: Denial")),
         across(COPE_sub.6pp, ~labelled(.x, label = "Brief Cope: Substance Use")),
         across(COPE_emo.6pp, ~labelled(.x, label = "Brief Cope: Using Emotional Support")),
         across(COPE_inst.6pp, ~labelled(.x, label = "Brief Cope: Using Instrumental Support")),
         across(COPE_diseng.6pp, ~labelled(.x, label = "Brief Cope: Behavior Disengagement")),
         across(COPE_vent.6pp, ~labelled(.x, label = "Brief Cope: Venting")),
         across(COPE_reframe.6pp, ~labelled(.x, label = "Brief Cope: Positive Reframing")),
         across(COPE_plan.6pp, ~labelled(.x, label = "Brief Cope: Planning")),
         across(COPE_hum.6pp, ~labelled(.x, label = "Brief Cope: Humor")),
         across(COPE_acc.6pp, ~labelled(.x, label = "Brief Cope: Acceptance")),
         across(COPE_rel.6pp, ~labelled(.x, label = "Brief Cope: Religion")),
         across(COPE_blame.6pp, ~labelled(.x, label = "Brief Cope: Self-Blame")))
  
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, contains("COPE") & !contains("_")) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, COPE_dist.6pp:COPE_blame.6pp) %>% knitr::kable()
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("COPE")) 
```

##### Check Reliability

Not applicable: each scale only has 2 items
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("COPE"))
```
::::
:::::

## DAS: Dyadic Adjustment Scale

::::: panel-tabset
### Notes

-   Spanier, 1976
-   32 items
-   Variable Likert Scales:
    -   Items 1-22: 0-5 Likert Scale
        -   0 = Always disagree/Never
        -   5 = Always agree/All the time
    -   Items 23-24: 0-4 Likert Scale
        -   0 = Never/None of them
        -   4 = Every day/All of them
    -   Items 25-28: 0-5 Likert Scale
        -   0 = Never
        -   5 = More often
    -   Items 29-30: 0-1 Binary Scale
        -   0 = Yes
        -   1 = No
    -   Item 31: 0-6 Likert Scale
    -   Item 32: 0-5 Likert Scale
-   Sum score
    -   Higher scores = healthier relationships
-   4 subscales:
    -   Dyadic consensus: 1, 2, 3, 5, 7-15
    -   Dyadic satisfaction: 16-23, 31-32
    -   Dyadic cohesion: 24-28
    -   Affectional expression: 4, 6, 29-30
-   Reverse score: 16, 17, 20, 21, 22

### Script

#### Recode item scores

```{r}
df <- df %>%
# Recode Items 1-15
  mutate(across(c(DAS1.6pp:DAS15.6pp, DAS18.6pp, DAS19.6pp),
            ~case_when(
              . == 1 ~ 5, 
              . == 2 ~ 4, 
              . == 3 ~ 3, 
              . == 4 ~ 2, 
              . == 5 ~ 1, 
              . == 6 ~ 0, 
              .default = NA))) %>%
  
  # Recode Items 16, 17, 20, 21, 22
  mutate(across(c(DAS16.6pp, DAS17.6pp, 
                   DAS20.6pp, DAS21.6pp, DAS22.6pp),
            ~case_when(
              . == 1 ~ 0, 
              . == 2 ~ 1, 
              . == 3 ~ 2, 
              . == 4 ~ 3, 
              . == 5 ~ 4, 
              . == 6 ~ 5, 
              .default = NA))) %>%
  
  # Recode Items 23-24
  mutate(across(DAS23.6pp:DAS24.6pp,
            ~case_when(
              . == 1 ~ 4, 
              . == 2 ~ 3, 
              . == 3 ~ 2,
              . == 4 ~ 1, 
              . == 5 ~ 0, 
              .default = NA))) %>%
  
  # Recode Items 25-30
  mutate(across(DAS25.6pp:DAS30.6pp,
            ~case_when(
              . == 1 ~ 0, 
              . == 2 ~ 1, 
              . == 3 ~ 2, 
              . == 4 ~ 3, 
              . == 5 ~ 4, 
              . == 6 ~ 5, 
              .default = NA))) %>%
  
  # Recode Item 31
  mutate(across(DAS31.6pp,
            ~case_when(
              . == 1 ~ 0, 
              . == 2 ~ 1, 
              . == 3 ~ 2, 
              . == 4 ~ 3, 
              . == 5 ~ 4, 
              . == 6 ~ 5, 
              . == 7 ~ 6,
              .default = NA))) %>%
  
  # Recode Item 32
  mutate(across(DAS32.6pp,
            ~case_when(
              . == 1 ~ 5, 
              . == 2 ~ 4, 
              . == 3 ~ 3, 
              . == 4 ~ 2, 
              . == 5 ~ 1, 
              . == 6 ~ 0, 
              .default = NA)))
```

#### Rename reverse-scored items

```{r}
# Mark reversed scores with `_r`
setnames(x = df, 
                     old = c("DAS16.6pp", "DAS17.6pp", "DAS20.6pp", "DAS21.6pp", 
                             "DAS22.6pp"), 
                     new = gsub(pattern = ".6pp", 
                          replacement = "_r.6pp", 
                          x = c("DAS16.6pp", "DAS17.6pp", "DAS20.6pp", "DAS21.6pp", 
                             "DAS22.6pp")))
```

#### Calculate summary scores

```{r}
df <- df %>%
  
  # Tell R that scores are numeric
  mutate(across(DAS1.6pp:DAS32.6pp, as.numeric)) %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total score and subscales 
  mutate(DAS_con.6pp = sum(c(c_across(DAS1.6pp:DAS3.6pp), DAS5.6pp, c_across(DAS7.6pp:DAS15.6pp)), na.rm = T),
         DAS_sat.6pp = sum(c(c_across(DAS16_r.6pp:DAS23.6pp), c_across(DAS31.6pp:DAS32.6pp)), na.rm = T),
         DAS_coh.6pp = sum(c_across(DAS24.6pp:DAS28.6pp), na.rm = T),
         DAS_aff.6pp = sum(c(DAS4.6pp, DAS6.6pp, c_across(DAS29.6pp:DAS30.6pp)), na.rm = T),
         DAS_tot.6pp = sum(c_across(DAS1.6pp:DAS32.6pp), na.rm = T)) %>%
  
  # Convert 0 to NA
  mutate(across(DAS_con.6pp:DAS_tot.6pp, ~na_if(., 0))) %>%
  
    # Move the total score and subscales so they come immediately after the measures
  relocate(c(DAS_con.6pp, DAS_sat.6pp, DAS_coh.6pp, DAS_aff.6pp, DAS_tot.6pp), .after = DAS32.6pp) 
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(DAS1.6pp:DAS32.6pp,
            ~ labelled(., label = "Dyadic Adjustment Scale"))) %>%
  mutate(DAS_con.6pp = labelled(DAS_con.6pp, label = "DAS: Dyadic Consensus"),
         DAS_sat.6pp = labelled(DAS_sat.6pp, label = "DAS: Dyadic Satisfaction"),
         DAS_coh.6pp = labelled(DAS_coh.6pp, label = "DAS: Dyadic Cohesion"),
         DAS_aff.6pp = labelled(DAS_aff.6pp, label = "DAS: Affectional Expression"),
         DAS_tot.6pp = labelled(DAS_tot.6pp, label = "Dyadic Adjustment Scale Total"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Direct Score
check_categorical(df, contains("DAS") & !contains("_")) %>% select(-label) %>% arrange(value) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("DAS") & contains("_r")) %>% select(-label) %>% arrange(value) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, DAS_con.6pp:DAS_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, DAS1.6pp:DAS32.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("DAS")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("DAS"))
```
::::
:::::

## EPDS: Edinburgh Postnatal Depression Scale

::::: panel-tabset
### Notes

-   Cox et al., 1987
-   9 items (originally 10, but removed suicidality item)
-   0-3 Likert Scale (different anchor labels for question)
-   Sum score
    -   Higher scores = greater depressive symptoms
    -   Darby's syntax, it was a mean score, but online says it should
        be a sum score
-   No subscales
-   Reverse score: 3, 5, 6, 7, 8, 9
-   According to Darby's syntax, Question 2 was phrased incorrectly
    until Couple 10 and requires reverse scoring

### Script

#### Recode item scores

```{r}
df <- df %>%
  mutate(across(EPDS1.6pp:EPDS9.6pp,
            ~ case_when(
                     . == 1 ~ 0,
                     . == 2 ~ 1,
                     . == 3 ~ 2,
                     . == 4 ~ 3,
                     .default = NA))) 
```

#### Reverse item score

```{r}
df <- df %>%
  mutate(across(c(EPDS3.6pp, EPDS5.6pp:EPDS9.6pp),
            ~3-.)) %>%
  mutate(EPDS2.6pp = case_when(
    CoupleID < 10  ~ 3-EPDS3.6pp, 
    .default = EPDS2.6pp
  )) # fixing EPDS2 for couples 1-9

# Mark reversed scores with `_r`
setnames(x = df, 
         old = c("EPDS3.6pp", "EPDS5.6pp", "EPDS6.6pp", "EPDS7.6pp", "EPDS8.6pp", "EPDS9.6pp"), 
         new = gsub(pattern = ".6pp", 
                    replacement = "_r.6pp", 
                    x = c("EPDS3.6pp", "EPDS5.6pp", "EPDS6.6pp", "EPDS7.6pp", "EPDS8.6pp", "EPDS9.6pp")))
```

#### Calculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(EPDS_tot.6pp = sum(c_across(EPDS1.6pp:EPDS9_r.6pp), na.rm = F))%>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(EPDS_tot.6pp, .after = EPDS_tot.6pp)
```

### Label

```{r}
df <- df %>% 
  # Direct Score
  mutate(across(c(contains("EPDS") & !contains("_")), 
            ~ labelled(., label = "Edinburgh Postnatal Depression Scale"))) %>%
  #Reverse Score
  mutate(across(c(contains("EPDS") & contains("_r")), 
            ~ labelled(., label = "Edinburgh Postnatal Depression Scale (reverse-scored)"))) %>%
  # Total Score
  mutate(EPDS_tot.6pp = labelled(EPDS_tot.6pp, label = "EPDS: Total Score"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Direct Score
check_categorical(df, contains("EPDS") & !contains("_")) %>% arrange(value) %>% select(-label) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("EPDS") & contains("_r"))%>% select(-label) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, EPDS_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, EPDS1.6pp:EPDS9_r.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("EPDS")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("EPDS"))
```
::::
:::::

## IBQR: Infant Behavior Questionnaire—Revised

::::: panel-tabset
### Notes

-   Putman et al., 2014
-   37 items
-   1-7 Likert Scale
    -   1 = Never
    -   7 = Always
-   Mean score
    -   Higher scores = more frequent expression of temperament trait
-   3 Subscales:
    -   Surgency: 1, 2, 7, 8, 13, 14, 15, 20, 21, 26, 27, 36, 37
    -   Negative Affect: 3, 4, 9, 10, 16, 17, 22. 23, 28, 29, 32, 33
    -   Effortful control: 5, 6, 11R, 12, 18, 19, 24, 25, 30, 31, 34, 35
-   Reverse score: 11

### Script

#### Recode item scores

```{r}
df <- df %>%
  mutate(across(contains("IBQR"),
            ~ case_when(
                     . == 8 ~ NA,
                     .default = .))) 
```

#### Reverse score item 11

```{r}
df <- df %>%
  mutate(IBQR11_r.6pp = 8-IBQR11.6pp, 
         .keep = "unused", .after = IBQR10.6pp)
```

#### Calculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(IBQR_surgency.6pp = round(mean(c(IBQR1.6pp, IBQR2.6pp, IBQR7.6pp, IBQR8.6pp, 
                                             IBQR13.6pp, IBQR14.6pp, IBQR15.6pp, 
                                             IBQR20.6pp, IBQR21.6pp, IBQR26.6pp, IBQR27.6pp, 
                                             IBQR36.6pp, IBQR37.6pp), 
                                    na.rm = T), 3),
         IBQR_negaffect.6pp = round(mean(c(IBQR3.6pp, IBQR4.6pp, IBQR9.6pp, 
                                              IBQR10.6pp, IBQR16.6pp, IBQR17.6pp, 
                                              IBQR22.6pp, IBQR23.6pp, IBQR28.6pp, IBQR29.6pp, 
                                              IBQR32.6pp, IBQR33.6pp), 
                                     na.rm = T), 3),
         IBQR_effcontrol.6pp = round(mean(c(IBQR5.6pp, IBQR6.6pp, 
                                               IBQR11_r.6pp, IBQR12.6pp, IBQR18.6pp, IBQR19.6pp, 
                                               IBQR24.6pp, IBQR25.6pp, 
                                               IBQR30.6pp, IBQR31.6pp, IBQR34.6pp, IBQR35.6pp), 
                                      na.rm = T), 3)) %>%
  
  # Convert NaN to NA
  mutate(across(IBQR_surgency.6pp:IBQR_effcontrol.6pp, ~coalesce(., NA_real_))) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(IBQR_surgency.6pp:IBQR_effcontrol.6pp, .after = IBQR37.6pp)
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(contains("IBQR") & !contains("_"),
            ~ labelled(., 
                     c("Never" = 1, 
                       "Very rarely" = 2, 
                       "Less than half the time" = 3,
                       "About half the time" = 4, 
                       "More than half the time" = 5, 
                       "Almost always" = 6, 
                       "Always" = 7),
                     label = "Infant Behavior Questionnaire, Revised Very Short Form"))) %>%
  mutate(IBQR11_r.6pp = labelled(IBQR11_r.6pp, 
                                 c("Never" = 7, 
                                   "Very rarely" = 6, 
                                   "Less than half the time" = 5,
                                   "About half the time" = 4, 
                                   "More than half the time" = 3, 
                                   "Almost always" = 2, 
                                   "Always" = 1),
                                 label = "Infant Behavior Questionnaire, Revised Very Short Form (reverse-scored)" )) %>%
  mutate(IBQR_surgency.6pp = labelled(IBQR_surgency.6pp, label = "IBQ-R: Surgency Subscale"), 
         IBQR_negaffect.6pp = labelled(IBQR_negaffect.6pp, label = "IBQ-R: Negative Affect Subscale"), 
         IBQR_effcontrol.6pp = labelled(IBQR_effcontrol.6pp, label = "IBQ-R: Effortful Control"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Direct Score
check_categorical(df, contains("IBQR") & !contains("_")) %>% knitr::kable()
# Reverse Score
check_categorical(df, IBQR11_r.6pp) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, IBQR_surgency.6pp:IBQR_effcontrol.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Surgency

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, IBQR1.6pp, IBQR2.6pp, IBQR7.6pp, IBQR8.6pp, 
                                  IBQR13.6pp, IBQR14.6pp, IBQR15.6pp, 
                                  IBQR20.6pp, IBQR21.6pp, IBQR26.6pp, IBQR27.6pp, 
                                  IBQR36.6pp, IBQR37.6pp), na.rm = T)
```

###### Negative Affect

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, IBQR3.6pp, IBQR4.6pp, IBQR9.6pp, 
                                              IBQR10.6pp, IBQR16.6pp, IBQR17.6pp, 
                                              IBQR22.6pp, IBQR23.6pp, IBQR28.6pp, IBQR29.6pp, 
                                              IBQR32.6pp, IBQR33.6pp), na.rm = T)
```

###### Effortful Control

```{r}
#| echo: false 
ltm::cronbach.alpha(data = select(df, IBQR5.6pp, IBQR6.6pp, 
                                  IBQR11_r.6pp, IBQR12.6pp, IBQR18.6pp, IBQR19.6pp, 
                                  IBQR24.6pp, IBQR25.6pp, 
                                  IBQR30.6pp, IBQR31.6pp, IBQR34.6pp, IBQR35.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("IBQR")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("IBQR"))
```
::::
:::::

## ISS: Index of Sexual Satisfaction

::::: panel-tabset
### Notes

-   Hudson, 1993
-   25 items
-   1-7 Likert
    -   1 = None of the time
    -   7 = All of the time
-   Sum score
    -   Higher scores = greater sexual discord
-   No subscales
-   Reverse score: 1, 2, 3, 9, 10, 12, 16, 17, 19, 21, 22, 23
-   Other notes:
    -   There are several versions of this scale, with main difference
        being Likert scale (items stay the same)

### Script

#### Reverse score

```{r ISS-reverse}

# Reverse Score Q's 1, 2, 3, 9, 10, 12, 16, 17, 19, 21, 22, 23
df <- df %>%
  mutate(across(c(ISS1.6pp, ISS2.6pp, ISS3.6pp,
                  ISS9.6pp, ISS10.6pp, ISS12.6pp,
                  ISS16.6pp, ISS17.6pp, ISS19.6pp, 
                  ISS21.6pp, ISS22.6pp, ISS23.6pp),
            ~ 8-.))

# Mark reversed scores with `_r`
setnames(x = df, 
         old = c("ISS1.6pp", "ISS2.6pp", "ISS3.6pp",
                  "ISS9.6pp", "ISS10.6pp", "ISS12.6pp",
                  "ISS16.6pp", "ISS17.6pp", "ISS19.6pp", 
                  "ISS21.6pp", "ISS22.6pp", "ISS23.6pp"), 
         new = gsub(pattern = ".6pp", 
                    replacement = "_r.6pp", 
                    x = c("ISS1.6pp", "ISS2.6pp", "ISS3.6pp",
                  "ISS9.6pp", "ISS10.6pp", "ISS12.6pp",
                  "ISS16.6pp", "ISS17.6pp", "ISS19.6pp", 
                  "ISS21.6pp", "ISS22.6pp", "ISS23.6pp")))
```

#### Calculate summary scores

```{r ISS-scales}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(ISS1_r.6pp:ISS25.6pp, as.numeric)) %>%
  
  # Calculate total score
  mutate(ISS_tot.6pp = sum(c_across(ISS1_r.6pp:ISS25.6pp), na.rm = T)) %>%
  
  # Clean up NAs
  mutate(ISS_tot.6pp = na_if(ISS_tot.6pp, 0)) %>%
  
  # Move the total score so they come immediately after the items
  relocate(ISS_tot.6pp, .after = ISS25.6pp)
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(contains("ISS") & !contains("_"),
            ~ labelled(., 
                     c("None of the time" = 1, 
                       "Very rarely" = 2, 
                       "A little of the time" = 3, 
                       "Some of the time" = 4, 
                       "A good part of the time" = 5, 
                       "Most of the time" = 6, 
                       "All of the time" = 7), 
                     label = "Index of Sexual Satisfaction"))) %>%
  mutate(across(contains("ISS") & contains("_r"),
            ~ labelled(., 
                     c("None of the time" = 7, 
                       "Very rarely" = 6, 
                       "A little of the time" = 5, 
                       "Some of the time" = 4, 
                       "A good part of the time" = 3, 
                       "Most of the time" = 2, 
                       "All of the time" = 1), 
                     label = "Index of Sexual Satisfaction (reverse-scored)"))) %>%
  mutate(ISS_tot.6pp = labelled(ISS_tot.6pp, label = "ISS: Total Score"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Direct Score
check_categorical(df, contains("ISS") & !contains("_")) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("ISS") & contains("_r")) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, ISS_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, ISS1_r.6pp:ISS25.6pp), 
                    CI = T, 
                    na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("ISS"))
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("IBQR"))
```
::::
:::::

## LAPR: Life Attitudes Profile—Revised

::::: panel-tabset
### Notes

-   Erci, 2008 (but adapted for HATCH)
-   16 items (out of 48 total)
-   1-7 Likert
    -   1 = Strongly disagree
    -   7 = Strongly agree
-   Sum score
    -   Higher scores = greater sense of meaning
-   2 dimensions (out of 6 in original scale):
    -   Purpose: 1, 2, 5, 18, 26, 31, 37, 48
    -   Coherence: 7, 12, 27. 29. 35, 38, 46
-   1 composite score (out of 2 in original scale):
    -   Personal Meaning Index
-   Reverse score: none

### Script

#### Recode item scores

```{r LAP-R-reverse}
# Reverse Score All Items
df <- df %>%
  mutate(across(c(LAPR1.6pp:LAPR48.6pp),
            ~ 8-.))
```

#### Calculate summary scores

```{r LAP-R-scales}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(LAPR1.6pp:LAPR48.6pp, as.numeric)) %>% 
  
  # Calculate total scores/subscales
  mutate(LAPR_pur.6pp = sum(c(LAPR1.6pp, LAPR2.6pp, LAPR5.6pp, LAPR18.6pp, 
                              LAPR26.6pp, LAPR31.6pp, LAPR37.6pp, LAPR48.6pp)),
         LAPR_coh.6pp = sum(c(LAPR7.6pp, LAPR12.6pp, LAPR16.6pp, LAPR27.6pp, 
                             LAPR29.6pp, LAPR35.6pp, LAPR38.6pp, LAPR46.6pp)),
         LAPR_pmi.6pp = sum(c_across(LAPR1.6pp:LAPR48.6pp)))%>%
         
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(c(LAPR_pur.6pp, LAPR_coh.6pp, LAPR_pmi.6pp), .after = LAPR48.6pp)
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(contains("LAPR") & !contains("_"),
            ~ labelled(., 
                     c("Strongly Disagree" = 1, 
                       "Disagree" = 2, 
                       "Moderately Disagree" = 3, 
                       "Undecided" = 4, 
                       "Moderately Agree" = 5, 
                       "Agree" = 6,
                       "Strongly Agree" = 7), 
                     label = "Life Attitudes Profile, Revised"))) %>%
  mutate(LAPR_pur.6pp = labelled(LAPR_pur.6pp, label = "LAP-R: Purpose"),
         LAPR_coh.6pp = labelled(LAPR_coh.6pp, label = "LAP-R: Coherenece"), 
         LAPR_pmi.6pp = labelled(LAPR_pmi.6pp, label = "LAP-R: Personal Meaning Index"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, contains("LAPR") & !contains("_")) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, LAPR_pur.6pp:LAPR_pmi.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Purpose

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, LAPR1.6pp, LAPR2.6pp, LAPR5.6pp, LAPR18.6pp, 
                              LAPR26.6pp, LAPR31.6pp, LAPR37.6pp, LAPR48.6pp), na.rm = T)
```

###### Coherence

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, LAPR7.6pp, LAPR12.6pp, LAPR16.6pp, LAPR27.6pp, 
                             LAPR29.6pp, LAPR35.6pp, LAPR38.6pp, LAPR46.6pp), na.rm = T)
```

###### Personal Meaning Index

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, contains("LAPR") & !contains("_")), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("LAPR")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("LAPR"))
```
::::
:::::

## MAI: Maternal Attachment Inventory

::::: panel-tabset
### Notes

-   Müller, 1994
-   26 items
-   1-4 Likert Scale
    -   1 = Almost never
    -   4 = Almost always
-   Sum score
    -   Higher scores = more secure/positive attachment
-   No subscales
-   Reverse score: none

### Script

#### Recode item scores

```{r}
df <- df %>%
  mutate(across(MAI1.6pp:MAI26.6pp,
            ~ case_when(
                     . == 1 ~ 4,
                     . == 2 ~ 3,
                     . == 3 ~ 2,
                     . == 4 ~ 1,
                     .default = NA)))
```

#### Caculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(MAI_tot.6pp = sum(c_across(MAI1.6pp:MAI26.6pp), na.rm = F)) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(MAI_tot.6pp, .after = MAI26.6pp)
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(contains("MAI") & !contains("_"),
            ~ labelled(., 
                     c("Almost always" = 4, 
                       "Often" = 3, 
                       "Sometimes" = 2, 
                       "Almost never" = 1), 
                     label = "Maternal Attachment Inventory"))) %>%
  mutate(MAI_tot.6pp = labelled(MAI_tot.6pp, label = "MAI: Total Score"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, contains("MAI") & !contains("_")) %>% arrange(value) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, MAI_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, MAI1.6pp:MAI26.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("MAI")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(filter(df, Parent == "mom"), contains("MAI"))
```
::::
:::::

## MAT: Marital Adjustment Test

::::: panel-tabset
### Notes

-   Locke & Wallace, 1959
-   15 items
-   Variable Likert Scales:
    -   Item 1: 7-point Likert scale (0-35)
    -   Items 2-9: 0-5 Likert scale (varying numbers) - Lowest = Always
        disagree - Highest = Always agree
    -   Item 10: 3-point Likert scale (0-10)
    -   Item 11: 4-point Likert scale (0-10)
    -   Item 12: 2-10 points depending on agreement
    -   Item 13: 4-point Likert scale (0-15)
    -   Item 14: 3-point Likert scale (0-15)
    -   Item 15: 4-point Likert scale (0-10)
-   Sum score
    -   Higher scores = greater satisfaction
-   No subscales
-   Reverse score: none

### Script

```{r}
df <- df %>%

  mutate(MAT1.6pp = case_when(
                        MAT1.6pp == 1 ~ 0,
                        MAT1.6pp == 2 ~ 2,
                        MAT1.6pp == 3 ~ 7,
                        MAT1.6pp == 4 ~ 15,
                        MAT1.6pp == 5 ~ 20,
                        MAT1.6pp == 6 ~ 25, 
                        MAT1.6pp == 7 ~ 35, 
                        .default = NA)) %>%

  mutate(across(c(MAT2.6pp, MAT3.6pp, MAT5.6pp,
                   MAT7.6pp:MAT9.6pp),
            ~ case_when( 
                        . == 1 ~ 5,
                        . == 2 ~ 4, 
                        . == 3 ~ 3,
                        . == 4 ~ 2,
                        . == 5 ~ 1,
                        . == 6 ~ 0, 
                        .default = NA))) %>%
 
  mutate(MAT4.6pp = case_when( 
                        MAT4.6pp == 1 ~ 8,
                        MAT4.6pp == 2 ~ 6, 
                        MAT4.6pp == 3 ~ 4,
                        MAT4.6pp == 4 ~ 2,
                        MAT4.6pp == 5 ~ 1,
                        MAT4.6pp == 6 ~ 0, 
                        .default = NA)) %>%
  
  mutate(MAT6.6pp = case_when( 
                        MAT6.6pp == 1 ~ 15,
                        MAT6.6pp == 2 ~ 12, 
                        MAT6.6pp == 3 ~ 9,
                        MAT6.6pp == 4 ~ 4,
                        MAT6.6pp == 5 ~ 1,
                        MAT6.6pp == 6 ~ 0, 
                        .default = NA)) %>%
  
  mutate(MAT10.6pp = case_when(
                        MAT10.6pp == 1 ~ 0,
                        MAT10.6pp == 2 ~ 2, 
                        MAT10.6pp == 3 ~ 10, 
                        .default = NA)) %>%
 
   mutate(MAT11.6pp = case_when(
                        MAT11.6pp == 1 ~ 10,
                        MAT11.6pp == 2 ~ 8, 
                        MAT11.6pp == 3 ~ 3,
                        MAT11.6pp == 4 ~ 0, 
                        .default = NA)) %>%

    mutate(MAT12.6pp = case_when(
                      MAT12a.6pp != MAT12b.6pp ~ 2, 
                      MAT12a.6pp == 1 & MAT12b.6pp == 1 ~ 3, 
                      MAT12a.6pp == 2 & MAT12b.6pp == 2 ~ 10, 
                      .default = NA),
         .after = MAT11.6pp, .keep = "unused") %>%
  
  mutate(MAT13.6pp = case_when(
                        MAT13.6pp == 1 ~ 0,
                        MAT13.6pp == 2 ~ 3, 
                        MAT13.6pp == 3 ~ 8,
                        MAT13.6pp == 4 ~ 15, 
                        .default = NA)) %>%
  
  mutate(MAT14.6pp = case_when(
                        MAT14.6pp == 1 ~ 15,
                        MAT14.6pp == 2 ~ 0, 
                        MAT14.6pp == 3 ~ 1, 
                        .default = NA)) %>%
  
  mutate(MAT15.6pp = case_when(
                        MAT15.6pp == 1 ~ 0,
                        MAT15.6pp == 2 ~ 2, 
                        MAT15.6pp == 3 ~ 10,
                        MAT15.6pp == 4 ~ 10, 
                        .default = NA)) 

  
```

#### Calculate Sum Score

```{r MAT-scales}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(MAT1.6pp:MAT15.6pp, as.numeric)) %>%
  
  # Calculate total scores
  mutate(MAT_tot.6pp = sum(c_across(MAT1.6pp:MAT15.6pp))) %>%
  
  # Move the total score so they come immediately after the measures
  relocate(MAT_tot.6pp, .after = MAT15.6pp) 
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(MAT1.6pp:MAT15.6pp,
            ~ labelled(., 
                     label = "Marital Adjustment Test"))) %>%
  mutate(MAT_tot.6pp = labelled(MAT_tot.6pp, label = "MAT: Total Score"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Numbers

```{r}
#| echo: false
check_continuous(df, MAT_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, MAT1.6pp:MAT15.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("MAT"))
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("MAT"))
```
::::
:::::

## PBQ: Postpartum Bonding Questionnaire

::::: panel-tabset
### Notes

-   Brockington et al., 2001
-   25 items
-   0-5 Likert Scale
    -   0 = Always/Never
    -   5 = Never/Always
-   Sum score
    -   Higher scores = more impaired bonding Darby's SPSS script, it's
        a mean. but scoring instructions say to take a sum
-   Subscales:
    -   Impaired bonding: 1, 2, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
    -   Rejection and pathological anger: 3, 4, 5, 11, 14, 21, 23
    -   Anxiety about the infant: 19, 20, 22, 25 cipient abuse: 18, 24
-   Reverse score: 1, 4, 8, 9, 11, 16, 22, 25

### Script

#### Recode item scores

```{r}
df <- df %>%
  mutate(across(contains("PBQ"),
            ~ case_when(
                     . == 1 ~ 5, # always
                     . == 2 ~ 4,
                     . == 3 ~ 3,
                     . == 4 ~ 2,
                     . == 5 ~ 1, 
                     . == 6 ~ 0, # never
                     .default = NA)))
```

#### Reverse item scores

```{r}
df <- df %>%
  mutate(across(c(PBQ1.6pp, PBQ4.6pp, PBQ8.6pp, PBQ9.6pp, 
                  PBQ11.6pp, PBQ16.6pp, PBQ22.6pp, PBQ25.6pp),
            ~5-.))

# Mark reversed scores with `_r`
setnames(x = df, 
         old = c("PBQ1.6pp", "PBQ4.6pp", "PBQ8.6pp", "PBQ9.6pp", 
                 "PBQ11.6pp", "PBQ16.6pp", "PBQ22.6pp", "PBQ25.6pp"), 
         new = gsub(pattern = ".6pp", 
                    replacement = "_r.6pp", 
                    x = c("PBQ1.6pp", "PBQ4.6pp", "PBQ8.6pp", "PBQ9.6pp", 
                          "PBQ11.6pp", "PBQ16.6pp", "PBQ22.6pp", "PBQ25.6pp")))
```

#### Calculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(PBQ_impaired.6pp = sum(c(PBQ1_r.6pp, PBQ2.6pp, 
                                  c_across(PBQ6.6pp:PBQ10.6pp), 
                                  PBQ12.6pp, PBQ13.6pp, 
                                  c_across(PBQ15.6pp:PBQ17.6pp)), na.rm = F),
         PBQ_anger.6pp = sum(c(c_across(PBQ3.6pp:PBQ5.6pp), 
                               PBQ11_r.6pp, PBQ14.6pp, PBQ21.6pp, PBQ23.6pp), na.rm = T), 
         PBQ_anxiety.6pp = sum(c(PBQ19.6pp, PBQ20.6pp, PBQ22_r.6pp, PBQ25_r.6pp), na.rm = T), 
         PBQ_abuse.6pp = sum(c(PBQ18.6pp, PBQ24.6pp), na.rm = T)) %>%
  
  # Recode 0's that should be NA 
  mutate(across(PBQ_impaired.6pp:PBQ_abuse.6pp, 
                ~case_when(all(is.na(c_across(PBQ1_r.6pp:PBQ25_r.6pp))) ~ NA_real_, 
                           .default = .))) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(PBQ_impaired.6pp:PBQ_abuse.6pp, .after = PBQ25_r.6pp)
```

### Label

```{r}
df <- df %>% 
  # Direct Score
  mutate(across(contains("PBQ") & !contains("_"),
            ~ labelled(., 
                     c("Always" = 5, 
                       "Very often" = 4, 
                       "Quite often" = 3, 
                       "Sometimes" = 2, 
                       "Rarely" = 1, 
                       "Never" = 0), 
                     label = "Postpartum Bonding Questionnaire"))) %>%
  # Reverse score
  mutate(across(contains("PBQ") & contains("_r"),
            ~ labelled(., 
                     c("Always" = 0, 
                       "Very often" = 1, 
                       "Quite often" = 2, 
                       "Sometimes" = 3, 
                       "Rarely" = 4, 
                       "Never" = 5), 
                     label = "Postpartum Bonding Questionnaire (reverse-scored)"))) %>%
  # Summary scores
  mutate(PBQ_impaired.6pp = labelled(PBQ_impaired.6pp, label = "PBQ: Impaired Bonding"), 
         PBQ_anger.6pp = labelled(PBQ_anger.6pp, label = "PBQ: Rejection and Pathological Anger"), 
         PBQ_anxiety.6pp = labelled(PBQ_anxiety.6pp, label = "PBQ: Anxiety about the Infant"), 
         PBQ_abuse.6pp = labelled(PBQ_abuse.6pp, label = "PBQ: Incipient Abuse"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false

# Direct Score
check_categorical(df, contains("PBQ") & !contains("_")) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("PBQ") & contains("_r")) %>% arrange(value) %>% knitr::kable()

```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, PBQ_impaired.6pp:PBQ_abuse.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Impaired Bonding

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(PBQ1_r.6pp, PBQ2.6pp,
                                        PBQ6.6pp:PBQ10.6pp,
                                        PBQ12.6pp, PBQ13.6pp, 
                                        PBQ15.6pp:PBQ17.6pp)), na.rm = T)
```

###### Rejection and pathological anger

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(PBQ3.6pp:PBQ5.6pp, 
                                        PBQ11_r.6pp, PBQ14.6pp, PBQ21.6pp,
                                        PBQ23.6pp)), na.rm = T)
```

###### Anxiety about the infant

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(PBQ19.6pp, PBQ20.6pp, PBQ22_r.6pp, PBQ25_r.6pp)), na.rm = T)
```

###### Incipient abuse

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, c(PBQ18.6pp, PBQ24.6pp)), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PBQ"))
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("PBQ"))
```
::::
:::::

## PingSS: Parenting Stress Scale

::::: panel-tabset
### Notes

-   Berry & Jones, 1995
-   18 items
-   1-5 Likert scale:
    -   1 = Strongly disagree
    -   5 = Strongly agree
-   Sum score
    -   Higher score = more stress
    -   But SPSS syntax calculated a mean
-   No subscales
-   Reverse score: 1, 2, 5, 6, 7, 8, 17, 18

### Script

#### Reverse item scores

```{r}
df <- df %>%
  mutate(across(c(PingSS1.6pp, PingSS2.6pp, PingSS5.6pp:PingSS8.6pp,
                  PingSS17.6pp, PingSS18.6pp),
            ~6-.))

# Mark reversed scores with `_r`
setnames(x = df, 
         old = c("PingSS1.6pp", "PingSS2.6pp", "PingSS5.6pp",
                 "PingSS6.6pp", "PingSS7.6pp", "PingSS8.6pp",
                 "PingSS17.6pp", "PingSS18.6pp"), 
         new = gsub(pattern = ".6pp", 
                    replacement = "_r.6pp", 
                    x = c("PingSS1.6pp", "PingSS2.6pp", "PingSS5.6pp",
                          "PingSS6.6pp", "PingSS7.6pp", "PingSS8.6pp",
                          "PingSS17.6pp", "PingSS18.6pp")))
```

#### Calculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(PingSS_tot.6pp = sum(c_across(PingSS1_r.6pp:PingSS18_r.6pp), na.rm = T)) %>%
  
   # Recode 0's that should be NA 
  mutate(PingSS_tot.6pp = case_when(
    all(is.na(c_across(PingSS1_r.6pp:PingSS18_r.6pp))) ~ NA_real_,
    .default = PingSS_tot.6pp)) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(PingSS_tot.6pp, .after = PingSS18_r.6pp)
```

### Label

```{r}
df <- df %>% 
  # Direct scores
  mutate(across(contains("PingSS") & !contains("_"),
            ~ labelled(., 
                     c("Strongly disagree" = 1, 
                       "Disagree" = 2, 
                       "Undecided" = 3, 
                       "Agree" = 4, 
                       "Strongly agree" = 5),
                     label = "Parenting Stress Scale"))) %>%
  # Reverse scores
  mutate(across(contains("PingSS") & contains("_r"),
            ~ labelled(., 
                     c("Strongly disagree" = 5, 
                       "Disagree" = 4, 
                       "Undecided" = 3, 
                       "Agree" = 2, 
                       "Strongly agree" = 1),
                     label = "Parenting Stress Scale (reverse-scored)"))) %>%
  # Sum Score
  mutate(PingSS_tot.6pp = labelled(PingSS_tot.6pp, label = "Parenting Stress Scale: Total Score"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false

# Direct Score
check_categorical(df, contains("PingSS") & !contains("_")) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("PingSS") & contains("_r")) %>% arrange(value) %>% knitr::kable()

```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, PingSS_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, PingSS1_r.6pp:PingSS18_r.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PingSS"))
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("PingSS"))
```
::::
:::::

## PSI: Parenting Stress Index

::::: panel-tabset
### Notes

-   Abidin, 2012
-   36 items
-   1-5 Likert scale:
    -   1 = Strongly disagree
    -   5 = Strongly agree
    -   The scoring instructions seem to be reversed
-   Sum score
    -   Higher scores for PD, PCDI, DC= more parenting stress
    -   Higher scores for DR = increased social desirability bias
-   Subscales:
    -   Defensive responding (DR): 1, 2, 3, 7, 8, 9, 11
    -   Parental distress (PD): 1-12
    -   Parent-Child Dysfunctional Interaction (PCDI): 13-24
    -   Difficult Child (DC): 25-36
    -   Total score: PD+PCDI+DC
-   Reverse score: all

### Script

#### Recode item scores

```{r}
df <- df %>%
  mutate(across(PSI1.6pp:PSI36.6pp,
                ~ 6-.))
```

#### Calculate summary scores

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  
  # Calculate subscales/total score
  mutate(PSI_dr.6pp = sum(c(PSI1.6pp, PSI2.6pp, PSI3.6pp, 
                            PSI7.6pp, PSI8.6pp, PSI9.6pp, PSI11.6pp),
                          na.rm = F), 
         PSI_pd.6pp = sum(c_across(PSI1.6pp:PSI12.6pp), na.rm = F), 
         PSI_pcdi.6pp = sum(c_across(PSI13.6pp:PSI24.6pp), na.rm = F), 
         PSI_dc.6pp = sum(c_across(PSI25.6pp:PSI36.6pp), na.rm = F),
         PSI_tot.6pp = sum(c_across(PSI1.6pp:PSI36.6pp), na.rm = F)) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(PSI_dr.6pp:PSI_tot.6pp, .after = PSI36.6pp)
```

### Label

```{r}
df <- df %>% 
  # Label Majority of Items
  mutate(across(c(PSI1.6pp:PSI21.6pp, PSI23.6pp:PSI31.6pp, PSI34.6pp:PSI36.6pp),
            ~ labelled(., 
                     c("Strongly disagree" = 1,  
                       "Disagree" = 2,  
                       "Not sure" = 3,  
                       "Agree" = 4,  
                       "Strongly agree" = 5),
                     label = "Parenting Stress Index"))) %>%
  # Label special items
  mutate(PSI22.6pp = labelled(PSI22.6pp, 
                              c("A very good parent" = 1, 
                                "A better than average parent" = 2, 
                                "An average parent" = 3, 
                                "A person who has some trouble being a parent" = 4,
                                "Not very good at being a parent" = 5), 
                              label = "Parenting Stress Index"), 
         PSI32.6pp = labelled(PSI32.6pp,
                              c("Much easier than I expected" = 1,
                                "Somewhat easier than I expected" = 2,
                                "About as hard as I expected" = 3,
                                "Somewhat harder than I expected" = 4,
                                "Much harder than I expected" = 5),
                              label = "Parenting Stress Index"), 
         PSI33.6pp = labelled(PSI33.6pp, 
                              c("1-3" = 1,
                                "4-5" = 2,
                                "6-7" = 3,
                                "8-9" = 4,
                                "10+" = 5), 
                              label = "Parenting Stress Index")) %>%
  # Label Subscales and Total Score
  mutate(PSI_dr.6pp = labelled(PSI_dr.6pp, label = "PSI: Defensive Responding Scale"), 
         PSI_pd.6pp = labelled(PSI_pd.6pp, label = "PSI: Parental Distress Scale"), 
         PSI_pcdi.6pp = labelled(PSI_pcdi.6pp, label = "PSI: Parent-Child Dysfunctional Interaction"), 
         PSI_dc.6pp = labelled(PSI_dc.6pp, label = "PSI: Difficult Child Scale"), 
         PSI_tot.6pp = labelled(PSI_tot.6pp, label = "PSI: Total Score"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, c(PSI1.6pp:PSI21.6pp, PSI23.6pp:PSI31.6pp, PSI34.6pp:PSI36.6pp)) %>% arrange(value) %>% knitr::kable()
check_categorical(df, PSI22.6pp) %>% knitr::kable()
check_categorical(df, PSI32.6pp) %>% knitr::kable()
check_categorical(df, PSI33.6pp) %>% knitr::kable()

```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, PSI_dr.6pp:PSI_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, PSI1.6pp:PSI36.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PSI"))
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("PSI"))
```
::::
:::::

## PSQI: Pittsburgh Sleep Quality Index

::::::::: panel-tabset
### Notes

-   Buysee et al., 1989
-   9 items (item 5 has A-J)
-   0-3 Likert scale
    -   Items 1-4 are open-ended
    -   Items 5-8: 0 = not during the past month; 3 = three or more
        times a week
    -   Item 9: 0 = very good; 3 = very bad
-   Sum score of "components"
    -   For global PSQI, a score over 5 indicates poor sleep quality
    -   See below for component score calculations
-   No reverse scores
-   Other notes:
    -   Item 1: if they listed a range of times, we took the average
    -   Item 2: if they listed a range of times, we took the average
    -   Item 3: if they listed a range of times, we took the average
    -   Item 4: if they listed a range of times, we took the average
    -   Component 5: I replaced missing values in 5b-5j with the mean of
        5b-5j and then took the sum before recoding

### Script

::::: panel-tabset
#### Recode item scores/responses

::: panel-tabset
##### Item 1

```{r}
df <- df %>%
  
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(PSQI1_raw.6pp = PSQI1.6pp, .after = PSQI1.6pp) %>%
  
  # Create helper variable that standardizes time
  clean_time_range(PSQI1.6pp) %>% # creates helper_clean variable
  
  # Create helper variables that split up ranges 
  extract_time_range(helper_clean) %>% # creates helper_start and helper_end variables
  
  # Convert helpers to military time
  convert_to_military_night(c("helper_start", "helper_end")) %>%
  
  # Rewrite PSQI1.6pp as midpoint or start time 
  finalize_time(c("helper_start", "helper_end"), "PSQI1.6pp") %>%
  
  # Clean Specific Cases 
  mutate(PSQI1.6pp = case_when(
    CoupleID == 46 & Parent == "dad" ~ times("22:30:00"),
    CoupleID == 40 & Parent == "dad" ~ times("23:30:00"),
    CoupleID == 18 & Parent == "mom" ~ times("22:30:00"),
    CoupleID == 37 & Parent == "dad" ~ times("11:00:00"),
    CoupleID == 38 & Parent == "mom" ~ times("00:30:00"),
    .default = PSQI1.6pp
  )) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(PSQI1_raw.6pp, .after = PSQI9.6pp)
```

##### Item 2

```{r}
df <- df %>%
 
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(PSQI2_raw.6pp = PSQI2.6pp, .after = PSQI2.6pp) %>%
  
  # Create helper variable that standardizes times, ranges, and units
  standardize_latency(PSQI2.6pp) %>%
  
  # Extract time range
  extract_latency_times(helper_clean) %>%
  
  # Convert to minutes
  convert_to_minutes(helper_start, helper_end, helper_unit) %>%
  
  # Finalize PSQI2.6pp
  finalize_latency(PSQI2.6pp, helper_start, helper_end) %>%
  
  # Clean Specific Cases
  mutate(PSQI2.6pp = case_when(
    CoupleID == 46 & Parent == "dad" ~ 10.0,
    CoupleID == 7 & Parent == "dad" ~ 0.0, 
    CoupleID == 11 & Parent == "mom" ~ 0.0, 
    CoupleID == 30 & Parent == "mom" ~ 0.0,
    CoupleID == 91 & Parent == "dad" ~ 60.0, 
    .default = PSQI2.6pp)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(PSQI2_raw.6pp, .after = PSQI1_raw.6pp)
```

##### Item 3

```{r}
df <- df %>%
  
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(PSQI3_raw.6pp = PSQI3.6pp, .after = PSQI3.6pp)  %>%
  
  # Create helper variable that standardizes time
  clean_time_range(PSQI3.6pp) %>% # creates helper_clean variable
  
  # Create helper variables that split up ranges 
  extract_time_range(helper_clean) %>% # creates helper_start and helper_end variables
  
  # Convert helpers to military time
  convert_to_military_morning(c("helper_start", "helper_end")) %>%
  
  # Rewrite PSQI3.6pp as midpoint or start time 
  finalize_time(c("helper_start", "helper_end"), "PSQI3.6pp") %>%
  
  # Clean Specific Cases 
  mutate(PSQI3.6pp = case_when(
    CoupleID == 81 & Parent == "dad" ~ NA,
    CoupleID == 18 & Parent == "mom" ~ times("08:00:00"),
    CoupleID == 23 & Parent == "dad" ~ times("07:00:00"),
    .default = PSQI3.6pp)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(PSQI3_raw.6pp, .after = PSQI2_raw.6pp)
```

##### Item 4

```{r}
df <- df %>%
  
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(PSQI4_raw.6pp = PSQI4.6pp, .after = PSQI4.6pp)  %>%
  
  # Create helper variable that standardizes time
  standardize_hours(PSQI4.6pp) %>%
  
  # Create helper variables that split up ranges 
  extract_hours(helper_clean) %>%
  
  # Rewrite PSQI4.6pp as midpoint or start time 
  finalize_hours(PSQI4.6pp, helper_start, helper_end) %>%

  # Clean Specific Cases 
  mutate(PSQI4.6pp = case_when(
    CoupleID == 28 & Parent == "dad" ~ 6.5, 
    CoupleID == 62 & Parent == "dad" ~ 5.25, 
    CoupleID == 34 & Parent == "dad" ~ 6.0, 
    CoupleID == 16 & Parent == "mom" ~ 7.0, 
    .default = PSQI4.6pp)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(PSQI4_raw.6pp, .after = PSQI3_raw.6pp)
```

##### Items 5-9

```{r}
df <- df %>%
  
  rowwise() %>%
  
  # Recode values
  mutate(across(PSQI5a.6pp:PSQI9.6pp, 
            ~ case_when(
                     . == 1 ~ 0,
                     . == 2 ~ 1, 
                     . == 3 ~ 2, 
                     . == 4 ~ 3, 
                     .default = NA))) %>%
  
  # Convert PSQI5j to 0 when blank (per Buysse 2005) 
  mutate(PSQI5j.6pp = case_when(
    is.na(PSQI5j.6pp) == T & is.na(PSQI5a.6pp) == F ~ 0, 
    is.na(PSQI5a.6pp) == T ~ NA, 
    .default = PSQI5j.6pp)) 
```
:::

#### Calculate component scores

::: panel-tabset
##### Component 1: Overall Quality

-   Equal to PSQI9

```{r}
df <- df %>%
  mutate(PSQI_qual.6pp = PSQI9.6pp)%>%
  relocate(PSQI_qual.6pp, .after = PSQI4_raw.6pp)
```

##### Component 2: Latency

-   First transform PSQI2
-   Then add transformed score to PSQI5a
-   Finally transform the sum

```{r}
df <- df %>%
  
  rowwise() %>%
  
  # Step 1: PSQI2 score transformed to <15m=0; 16-30m=1; 31-60m=2; >60m=3
  mutate(PSQI_c2_helper = 
           case_when(
             PSQI2.6pp <= 15 ~ 0, 
             PSQI2.6pp > 15 & PSQI2.6pp <=30 ~ 1,
             PSQI2.6pp > 30 & PSQI2.6pp <= 60 ~ 2, 
             PSQI2.6pp > 60 ~ 3,
             .default = NA)) %>%
  
  # Step 2: Add score from step #1 to PSQI5a
  mutate(PSQI_c2_helper2 = PSQI_c2_helper + PSQI5a.6pp) %>%
  
  # Step 3: Combined score transformed to 0=0; 1-2=1; 3-4=2; 5-6=3
  mutate(PSQI_lat.6pp = 
           case_when(
             PSQI_c2_helper2 == 0 ~ 0, 
             PSQI_c2_helper2 == 1 | PSQI_c2_helper2 == 2 ~ 1, 
             PSQI_c2_helper2 == 3 | PSQI_c2_helper2 == 4 ~ 2, 
             PSQI_c2_helper2 == 5 | PSQI_c2_helper2 == 6 ~ 3)) %>%
  
  # Clean Up
  select(-contains("helper")) %>%
  relocate(PSQI_lat.6pp, .after = PSQI_qual.6pp)
```

##### Component 3: Duration

-   Transform PSQI4

```{r}
df <- df %>%
  
  rowwise() %>%
  
  mutate(PSQI_dur.6pp =
           case_when(PSQI4.6pp > 7 ~ 0, 
                     PSQI4.6pp <= 7 & PSQI4.6pp > 6 ~ 1, 
                     PSQI4.6pp <= 6 & PSQI4.6pp > 5 ~ 2, 
                     PSQI4.6pp <= 5 ~ 3, 
                     .default = NA)) %>%
  
  # Clean up 
  relocate(PSQI_dur.6pp, .after = PSQI_lat.6pp)
```

##### Component 4: Efficiency

-   First calculate time in bed (PSQI3-PSQI1)
-   Then divide PSQI4 by time in bed and multiply by 100
-   Finally transform the percentage

```{r}
df <- df %>%
  
  rowwise() %>%
  
  # Add fake date so that R knows that parents are waking up the day after they go to bed 
  mutate(PSQI_pm_helper = as.POSIXct(chron(dates. = "06/26/2022", times. = PSQI1.6pp))+25200) %>%
  mutate(PSQI_am_helper = as.POSIXct(chron(dates. = "06/27/2022", times. = PSQI3.6pp))+25200) %>%
  
  # Tell R that parents who go to bed after midnight are actually sleeping the following day
  mutate(PSQI_pm_helper = as.POSIXct(case_when(
    PSQI_pm_helper <= "2022-06-26 13:00:00" ~ PSQI_pm_helper+86400, 
    .default = PSQI_pm_helper), 
    origin = "1970-01-01")) %>%
  
  # Calculate hours in bed
  mutate(PSQI_hib_helper = as.numeric(difftime(PSQI_am_helper, PSQI_pm_helper, units = "hours"))) %>%
  
  # Divide sleeping hours by hours in bed
  mutate(PSQI_c4_helper = (PSQI4.6pp/PSQI_hib_helper)*100) %>%
  
  # Recode 4
  mutate(PSQI_effic.6pp = case_when(
    PSQI_c4_helper >= 85 ~ 0,
    PSQI_c4_helper < 85 & PSQI_c4_helper >= 75 ~ 1, 
    PSQI_c4_helper < 75 & PSQI_c4_helper >= 65 ~ 2, 
    PSQI_c4_helper < 65 ~ 3, 
    .default = NA)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(PSQI_effic.6pp, .after = PSQI_dur.6pp)
```

##### Component 5: Disturbance

-   First sum scores 5b through 5j
-   Then transform the sum

```{r}
df <- df %>% 
  
  rowwise() %>%
  
  # Calculate 5
  mutate(PSQI_c5_helper = sum(c_across(PSQI5b.6pp:PSQI5j.6pp))) %>%
  
  # Recode 5
  mutate(PSQI_disturb.6pp = case_when(
    PSQI_c5_helper == 0 ~ 0, 
    PSQI_c5_helper >= 1 & PSQI_c5_helper <= 9 ~ 1, 
    PSQI_c5_helper > 9 & PSQI_c5_helper <= 18 ~ 2, 
    PSQI_c5_helper > 18 ~ 3, 
    .default = NA)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(PSQI_disturb.6pp, .after = PSQI_effic.6pp)
```

##### Component 6: Meds

-   Equal to PSQI6

```{r}
df <- df %>%
  mutate(PSQI_med.6pp = PSQI6.6pp) %>%
  
  # Clean up
  relocate(PSQI_med.6pp, .after = PSQI_disturb.6pp)
```

##### Component 7: Dysfunction during Day

-   First add PSQI7 and PSQI8
-   Then transform the sum

```{r}
df <- df %>%
  
  rowwise() %>%
  
  mutate(PSQI_c7_helper = sum(c(PSQI7.6pp, PSQI8.6pp))) %>%
  
  mutate(PSQI_daydys.6pp = case_when(
    PSQI_c7_helper == 0 ~ 0,
    PSQI_c7_helper == 1 | PSQI_c7_helper == 2 ~ 1, 
    PSQI_c7_helper == 3 | PSQI_c7_helper == 4 ~ 2, 
    PSQI_c7_helper == 5 | PSQI_c7_helper == 6 ~ 3, 
    .default = NA)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(PSQI_daydys.6pp, .after = PSQI_med.6pp)
```
:::

#### Calculate Global Score

```{r}
df <- df %>%
  rowwise() %>%
  
  # Calculate total score
  mutate(PSQI_global.6pp = sum(c_across(PSQI_qual.6pp:PSQI_daydys.6pp))) %>%
  
  # Clean up
  relocate(PSQI_global.6pp, .after = PSQI_daydys.6pp)
  
```
:::::

### Label

```{r}
df <- df %>%
  
  # Items 1-4
  mutate(PSQI1.6pp = labelled(PSQI1.6pp, label = "PSQI: Bedtime"),
         PSQI2.6pp = labelled(PSQI2.6pp, label = "PSQI: Minutes to fall asleep"),
         PSQI3.6pp = labelled(PSQI3.6pp, label = "PSQI: Wake time"),
         PSQI4.6pp = labelled(PSQI4.6pp, label = "PSQI: Hours of actual sleep")) %>%
  
  # Items 1-4 (raw)
  mutate(PSQI1_raw.6pp = labelled(PSQI1_raw.6pp, label = "PSQI: Bedtime (raw)"),
         PSQI2_raw.6pp = labelled(PSQI2_raw.6pp, label = "PSQI: Minutes to fall asleep (raw)"),
         PSQI3_raw.6pp = labelled(PSQI3_raw.6pp, label = "PSQI: Wake time (raw)"),
         PSQI4_raw.6pp = labelled(PSQI4_raw.6pp, label = "PSQI: Hours of actual sleep (raw)")) %>%
  
  # Items 5a-5J
  mutate(across(PSQI5a.6pp:PSQI5j.6pp,
                ~ labelled(., 
                           label = "PSQI: Reasons for trouble sleeping",
                           labels = c("Not during the last month" = 0,
                                      "Less than once a week" = 1, 
                                      "Once or twice a week" = 2, 
                                      "Three or more times a week" = 3)))) %>%
  
  # Items 6-8
  mutate(across(PSQI6.6pp:PSQI8.6pp, 
                ~ labelled(., 
                           label = "PSQI: Misc. questions",
                           labels = c("Not during the last month" = 0,
                                      "Less than once a week" = 1, 
                                      "Once or twice a week" = 2, 
                                      "Three or more times a week" = 3)))) %>%
  
  # Item 9 
  mutate(PSQI9.6pp = labelled(PSQI9.6pp, 
                              label = "PSQI: How would you rate your sleep quality?", 
                              labels = c("Very good" = 0,
                                         "Fairly good" = 1, 
                                         "Fairly bad" = 2, 
                                         "Very bad" = 3))) %>%
  
  # Components
  mutate(PSQI_qual.6pp = labelled(PSQI_qual.6pp, label = "PSQI: Component 1, Sleep Quality"),
         PSQI_lat.6pp = labelled(PSQI_lat.6pp, label = "PSQI: Component 2, Sleep Latency"),
         PSQI_dur.6pp = labelled(PSQI_dur.6pp, label = "PSQI: Component 3, Sleep Duration"),
         PSQI_effic.6pp = labelled(PSQI_effic.6pp, label = "PSQI: Component 4, Sleep Efficiency"),
         PSQI_disturb.6pp = labelled(PSQI_disturb.6pp, label = "PSQI: Component 5, Sleep Disturbance"),
         PSQI_med.6pp = labelled(PSQI_med.6pp, label = "PSQI: Component 6, Sleep Medication"),
         PSQI_daydys.6pp = labelled(PSQI_daydys.6pp, label = "PSQI: Component 7, Dysfunction during the Day"),
         PSQI_global.6pp = labelled(PSQI_global.6pp, label = "Pittsburgh Sleep Quality Index: Global Score"))
  
```

### Check and Print

::::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false

check_categorical(df, PSQI5a.6pp:PSQI8.6pp) %>% knitr::kable()
check_categorical(df, PSQI9.6pp) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false

check_continuous(df, PSQI_global.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, PSQI_qual.6pp:PSQI_daydys.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PSQI") & !contains("MRI"))
```
:::

#### Print

::: panel-tabset
##### 1: Quality

```{r}
#| echo: false
print_slice(df, PSQI9.6pp, PSQI_qual.6pp)
```

##### 2: Latency

```{r}
#| echo: false
print_slice(df, PSQI2.6pp, PSQI5a.6pp, PSQI_lat.6pp)
```

##### 3: Duration

```{r}
#| echo: false
print_slice(df, PSQI4.6pp, PSQI_dur.6pp)
```

##### 4: Efficiency

```{r}
#| echo: false
print_slice(df, PSQI1_raw.6pp, PSQI3_raw.6pp, PSQI4.6pp, PSQI_effic.6pp)
```

##### 5: Disturbance

```{r}
#| echo: false
print_slice(df, PSQI5b.6pp:PSQI5j.6pp, PSQI_disturb.6pp)
```

##### 6: Medication

```{r}
#| echo: false
print_slice(df, PSQI6.6pp, PSQI_med.6pp)
```

##### 7: Dysfunction during the day

```{r}
#| echo: false
print_slice(df, PSQI7.6pp, PSQI8.6pp, PSQI_daydys.6pp)
```

##### Global PSQI

```{r}
#| echo: false
print_slice(df, PSQI_qual.6pp:PSQI_global.6pp)
```
:::
:::::
:::::::::

## PSS: Perceived Stress Scale

::::: panel-tabset
### Notes

-   Cohen et al., 1983
-   14 items
-   0-4 Likert Scale
    -   0 = Never
    -   4 = Very often
-   Sum score
    -   Higher scores = increased stress level
-   No subscale
-   Reverse score: 4, 5, 6, 7, 9, 10, 13

### Script

#### Recode item scores

```{r}
df <- df %>%
# Re-code items
  mutate(across(PSS1.6pp:PSS14.6pp, 
            ~case_when(
              . == 1  ~ 0,
              . == 2  ~ 1,
              . == 3  ~ 2,
              . == 4  ~ 3, 
              . == 5  ~ 4,
              .default = NA)))
```

#### Reverse item scores

```{r}
# Reverse Score Q's 4, 5, 6, 7, 9, 10, 13
df <- df %>%
  mutate(across(c(PSS4.6pp, PSS5.6pp, PSS6.6pp, 
                   PSS7.6pp, PSS9.6pp, PSS10.6pp, 
                   PSS13.6pp),
                   ~4-.))

# Mark reversed scores with `_r`
setnames(x = df, 
                     old = c("PSS4.6pp", "PSS5.6pp", "PSS6.6pp", 
                             "PSS7.6pp", "PSS9.6pp", "PSS10.6pp", 
                             "PSS13.6pp"), 
                     new = gsub(pattern = ".6pp", 
                          replacement = "_r.6pp", 
                          x = c("PSS4.6pp", "PSS5.6pp", "PSS6.6pp", 
                             "PSS7.6pp", "PSS9.6pp", "PSS10.6pp", 
                             "PSS13.6pp")))
```

#### Calculate summary score

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(PSS1.6pp:PSS14.6pp, as.numeric)) %>%
  
  # Calculate total scores/subscales
  mutate(PSS_tot.6pp = sum(c_across(PSS1.6pp:PSS14.6pp), na.rm = T)) %>%
  
  # Clean up NAs
  mutate(across(PSS_tot.6pp, ~na_if(., 0))) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(PSS_tot.6pp, .after = PSS14.6pp)
```

### Label

```{r}
df <- df %>% 
  # Create value and variable labels
  mutate(across(contains("PSS") & !contains("_"),
            ~ labelled(., 
                     c("Never" = 0, 
                       "Almost never" = 1, 
                       "Sometimes" = 2, 
                       "Fairly often" = 3, 
                       "Very often" = 4), 
                     label = "Perceived Stress Scale"))) %>%
  mutate(across(contains("PSS") & contains("_r"),
            ~ labelled(., 
                     c("Never" = 4, 
                       "Almost never" = 3,
                       "Sometimes" = 2,
                       "Fairly often" = 1, 
                       "Very often" = 0), 
                     label = "Perceived Stress Scale (reverse-scored)"))) %>%
  mutate(PSS_tot.6pp = labelled(PSS_tot.6pp, label = "Perceived Stress Scale: Total Score"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Direct Score
check_categorical(df, contains("PSS") & !contains("_")) %>% knitr::kable()
# Reverse Score
check_categorical(df, contains("PSS") & contains("_r")) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, PSS_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, PSS1.6pp:PSS14.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PSS")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("PSS"))
```
::::
:::::

## PYB: Parenting Your Baby

::::: panel-tabset
### Notes

-   Formerly "PARYC: Parenting Young Children"
-   Guyon-Harris et al., 2023
-   16 items + 2 "desire for change" items
-   1-7 Likert
    -   1 = Not at all
    -   7 = Most of the time
-   Mean score
    -   Higher scores = More frequent positive parenting behaviors
    -   "Desire for change": higher scores = greater desire for change
-   Subscales:
    -   Supporting and enjoying your baby (se)
    -   Planning ahead with your baby (pa)
    -   Change items not included in either subscale
-   Reverse score: both change items

### Script

#### Reverse item scores

```{r}
df<- df %>%
  mutate(across(c(PYB_se_change.6pp, PYB_pa_change.6pp), 
                ~ 8 - .))
```

#### Calculate summary scores

```{r}
df <- df %>%
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(PYB_se.6pp = round(mean(c_across(PYB_se1.6pp:PYB_se8.6pp), na.rm = T), 3),
         PYB_pa.6pp = round(mean(c_across(PYB_pa1.6pp:PYB_pa8.6pp), na.rm = T), 3), 
         PYB_tot.6pp = round(mean(c(PYB_se.6pp, PYB_pa.6pp), na.rm = T), 3)) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(PYB_se.6pp:PYB_tot.6pp, .after = PYB_pa_change.6pp)
```

### Label

```{r}
df <- df %>%
  # Create value and variable labels
  mutate(across(PYB_se1.6pp:PYB_se8.6pp, 
            ~ labelled(., 
                    labels = c("Not at all" = 1, 
                               "Rarely" = 2, 
                               "Occasionally" = 3,
                               "Sometimes" = 4,
                               "Often" = 5, 
                               "Very often" = 6,
                               "Most of the time" = 7), 
                     label = "PYB: Supporting and Enjoying Baby"))) %>%
  mutate(across(PYB_pa1.6pp:PYB_pa8.6pp, 
            ~ labelled(., 
                     c("Not at all" = 1, 
                       "Rarely" = 2, 
                       "Occasionally" = 3,
                       "Sometimes" = 4,
                       "Often" = 5, 
                       "Very often" = 6,
                       "Most of the time" = 7), 
                     label = "PYB: Planning Ahead"))) %>%
  mutate(PYB_pa_extra.6pp = labelled(PYB_pa_extra.6pp, label = "PYB: dropped from final scale")) %>%
  mutate(PYB_se_change.6pp = labelled(PYB_se_change.6pp, 
                                      c("Fine as is" = 1,
                                        "Almost fine as is" = 2,
                                        "Mostly okay" = 3,
                                        "Some changes needed" = 4,
                                        "Want a few changes" = 5,
                                        "Want a lot of changes" = 6,
                                        "Really want some changes" = 7), 
                                  label = "PYB Supporting/Enjoying: Would you do things differently?")) %>%
  mutate(PYB_pa_change.6pp = labelled(PYB_pa_change.6pp, 
                                      c("Fine as is" = 1,
                                        "Almost fine as is" = 2,
                                        "Mostly okay" = 3,
                                        "Some changes needed" = 4,
                                        "Want a few changes" = 5,
                                        "Want a lot of changes" = 6,
                                        "Really want some changes" = 7), 
                                  label = "PYB Planning Ahead: Would you do things differently?")) %>%
  mutate(PYB_se.6pp = labelled(PYB_se.6pp, label = "PYB: Supporting and Enjoying Baby Subscale")) %>%
  mutate(PYB_pa.6pp = labelled(PYB_pa.6pp, label = "PYB: Planning Ahead Subscale")) %>%
  mutate(PYB_tot.6pp = labelled(PYB_tot.6pp, label = "PYB: Overall Mean"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, c(PYB_se1.6pp:PYB_se8.6pp, PYB_pa1.6pp:PYB_pa8.6pp)) %>% arrange(value) %>% knitr::kable()

check_categorical(df, c(PYB_se_change.6pp, PYB_pa_change.6pp)) %>% arrange(value) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, PYB_se.6pp, PYB_pa.6pp, PYB_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Support/Enjoy

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, PYB_se1.6pp:PYB_se8.6pp), na.rm = T)
```

###### Planning Ahead

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, PYB_pa1.6pp:PYB_pa8.6pp), na.rm = T)
```

###### Overall Mean

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, PYB_se1.6pp:PYB_se8.6pp, PYB_pa1.6pp:PYB_pa8.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PYB") & !contains("MRI")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("PYB") & !contains("MRI"))
```
::::
:::::

## SCL: Symptom Checklist

:::::: panel-tabset
### Notes

-   Derogatis et al., 1973
-   90 items
    -   HATCH only includes 87 items
    -   2 suicidality items omitted:
        -   "Thoughts of ending your life" (#15) - depression subscale
        -   "Thoughts of death or dying" (#59) - additional items
    -   1 aggression item omitted:
        -   "Having urges to beat, injure, or harm someone." (#63) -
            anger-hostility subscale
-   0-4 Likert Scale
    -   0 = Not at all
    -   4 = Extremely
-   Mean scores
    -   Higher scores = higher distress
-   9 subscales, 3 global scales, and an "additional items" category:
    -   Subscales:
        -   Somatization (1, 4, 12, 27, 40, 42, 48, 49, 52, 53, 56, and
            58) 
        -   Obsessive-Compulsive (3, 9, 10, 28, 38, 45, 46, 51, 55, and
            65) terpersonal Sensitivity (6, 21, 34, 36, 37, 41, 61, 69,
                and 73)
        -   Depression (5, 14, 20, 22, 26, 29, 30, 31, 32, 54, 71, and
            79) 
        -   Anxiety (17, 23, 33, 39, 57, 72, 78, 80, and 86)
        -   Hostility (11, 24, 63, 67, 74, and 81)
        -   Phobic-Anxiety (13, 25, 47, 50, 70, 75, and 82)
        -   Paranoid Ideation (8, 18, 43, 68, 76, and 83)
        -   Psychoticism (7, 16, 35, 62, 77, 84, 85, 87, 88, and 90)
    -   Global scales:
        -   Global Severity Index (All items)
        -   Positive Symptom Distress Index (Mean of non-zero responses)
        -   Positive Symptom Total (Count of non-zero items)
    -   "Additional Items" category (19, 44, 59, 60, 64, and 89)
-   Reverse scored items: none
-   Other notes: Add .005 based on most recent scoring instructions in
    QGlobal

### Script

::: panel-tabset
#### Recode item scores

```{r}
df <- df %>%
# Re-code items
 mutate(across(SCL1.6pp:SCL90.6pp, 
            ~case_when( 
                        . == 1 ~ 0,
                        . == 2 ~ 1,
                        . == 3 ~ 2,
                        . == 4 ~ 3,
                        . == 5 ~ 4, 
                        .default = NA)))
```

#### Calculate symptom dimensions

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that scores are numeric
  mutate(across(SCL1.6pp:SCL90.6pp, as.numeric)) %>%
  
  # Calculate subscales
  mutate(SCL_som.6pp = mean(c(SCL1.6pp, SCL4.6pp, SCL12.6pp, 
                             SCL27.6pp, SCL40.6pp, SCL42.6pp, 
                             SCL48.6pp, SCL49.6pp, SCL50.6pp, 
                             SCL53.6pp, SCL56.6pp, SCL58.6pp), 
                           na.rm = T) + .005, 
         SCL_oc.6pp = mean(c(SCL3.6pp, SCL9.6pp, SCL10.6pp, 
                            SCL28.6pp, SCL38.6pp, SCL45.6pp, 
                            SCL46.6pp, SCL51.6pp, SCL55.6pp, SCL65.6pp), 
                          na.rm = T) + .005, 
         SCL_is.6pp = mean(c(SCL6.6pp, SCL21.6pp, SCL34.6pp,
                            SCL36.6pp, SCL37.6pp, SCL41.6pp, 
                            SCL61.6pp, SCL69.6pp, SCL73.6pp), 
                          na.rm = T) + .005, 
         SCL_dep.6pp = mean(c(SCL5.6pp, SCL14.6pp, SCL20.6pp, 
                             SCL22.6pp, SCL26.6pp, SCL29.6pp, 
                             SCL30.6pp, SCL31.6pp, SCL32.6pp, 
                             SCL54.6pp, SCL71.6pp, SCL79.6pp), 
                           na.rm = T) + .005, 
         SCL_anx.6pp = mean(c(SCL2.6pp, SCL17.6pp, SCL23.6pp, 
                             SCL33.6pp, SCL39.6pp, SCL57.6pp, 
                             SCL72.6pp, SCL78.6pp, SCL80.6pp, SCL86.6pp), 
                           na.rm = T) + .005, 
         SCL_hos.6pp = mean(c(SCL11.6pp, SCL24.6pp, SCL67.6pp,
                              SCL74.6pp, SCL81.6pp), 
                            na.rm = T) + .005, 
         SCL_phob.6pp = mean(c(SCL13.6pp, SCL25.6pp, SCL47.6pp, 
                              SCL50.6pp, SCL70.6pp, SCL75.6pp, SCL82.6pp), 
                            na.rm = T) + .005, 
         SCL_par.6pp = mean(c(SCL8.6pp, SCL18.6pp, SCL43.6pp, 
                             SCL68.6pp, SCL76.6pp, SCL83.6pp), 
                           na.rm = T) + .005, 
         SCL_psy.6pp = mean(c(SCL7.6pp, SCL16.6pp, SCL35.6pp, 
                             SCL62.6pp, SCL77.6pp, SCL84.6pp, 
                             SCL85.6pp, SCL88.6pp, SCL90.6pp), 
                           na.rm = T) + .005, 
         SCL_add.6pp = mean(c(SCL19.6pp, SCL44.6pp,SCL60.6pp, 
                             SCL64.6pp, SCL66.6pp, SCL89.6pp), 
                           na.rm = T) + .005 
         ) %>%
  
  # Round to two decimals
  mutate(across(c(SCL_som.6pp:SCL_add.6pp), ~round(., 2))) %>%
  
  # Replace NaN with NAs
  mutate(across(c(SCL_som.6pp:SCL_add.6pp), ~coalesce(., NA_real_)))
```

#### Calculate global scales

##### Global Severity Index

```{r}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Count number of NAs in a row
  row_count(SCL1.6pp:SCL90.6pp, count = NA, var = "SCL_count_NA", append = T) %>%
  
  # Calculate total number of responses in a row
  mutate(SCL_totr = 87 - SCL_count_NA) %>%

  # Calculate Global Severity Index by dividing the sum of all responses by the total number of responses and adding .005
  mutate(SCL_gsi.6pp = sum(c_across(SCL1.6pp:SCL90.6pp), na.rm = T)/SCL_totr + .005) %>%
  
  # Round to two decimals
  mutate(SCL_gsi.6pp = round(SCL_gsi.6pp, 2))
```

##### Positive Symptom Scales

```{r}
df <- df %>%
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Count number of zero-scored items in a row
  row_count(SCL1.6pp:SCL90.6pp, count = 0, var = "SCL_count_0", append = T) %>%

  # Calculate the Positive Symptom Total by subtracting the number of zero-value responses from the total number of responses
  mutate(SCL_pst.6pp = SCL_totr - SCL_count_0) %>%
  
  # Calculate the Positive Symptoms Distress Index by dividing the sum of all responses by the PST  and adding .005
  mutate(SCL_psdi.6pp = round(sum(c_across(SCL1.6pp:SCL90.6pp), na.rm = T)/SCL_pst.6pp + .005),2) 
```

#### Clean up subscales

```{r}
df <- df %>%
  
  # Remove helper variables
  select(-c(SCL_count_NA, SCL_count_0, SCL_totr)) %>% 

  # Replace NaN with NAs
  mutate(across(c(SCL_som.6pp:SCL_psdi.6pp), ~coalesce(., NA_real_))) %>%
  
  # Rowwise operation to set global scaleas to NA if all SCL1–SCL90 are NA
  rowwise() %>%
  mutate(across(SCL_gsi.6pp:SCL_psdi.6pp,
                ~ case_when(
                  all(is.na(c_across(SCL1.6pp:SCL90.6pp))) ~ NA_real_,
                  TRUE ~ .
                ))) %>%
  ungroup() %>%
  
  # Move the subscales so they come immediately after the measures
  relocate(SCL_som.6pp:SCL_psdi.6pp, .after = SCL90.6pp)
```
:::

### Label

```{r}
df <- df %>% 
  # Raw Items
  mutate(across(SCL1.6pp:SCL90.6pp,
            ~ labelled(., 
                     c("Not at all" = 0, 
                       "A little bit" = 1, 
                       "Moderately" = 2, 
                       "Quite a bit" = 3, 
                       "Extremely" = 4),
                     label = "Symptom Checklist 90"))) %>%
  
  # Subscales
  mutate(SCL_som.6pp = labelled(SCL_som.6pp, label = "SCL: Somatization Scale"), 
         SCL_oc.6pp = labelled(SCL_oc.6pp, label = "SCL: Obsessive Compulsive Scale"), 
         SCL_is.6pp = labelled(SCL_is.6pp, label = "SCL: Interpersonal Sensitivity Scale"), 
         SCL_dep.6pp = labelled(SCL_dep.6pp, label = "SCL: Depression Scale"),
         SCL_anx.6pp = labelled(SCL_anx.6pp, label = "SCL: Anxiety Scale"),
         SCL_hos.6pp = labelled(SCL_hos.6pp, label = "SCL: Hostility Scale"),
         SCL_phob.6pp = labelled(SCL_phob.6pp, label = "SCL: Phobic Anxiety Scale"),
         SCL_par.6pp = labelled(SCL_par.6pp, label = "SCL: Paranoid Ideation Scale"),
         SCL_psy.6pp = labelled(SCL_psy.6pp, label = "SCL: Psychoticism Scale"),
         SCL_add.6pp = labelled(SCL_add.6pp, label = "SCL: Additional Items")) %>%
  
  # Global Scales
  mutate(SCL_gsi.6pp = labelled(SCL_gsi.6pp, label = "SCL: Global Severity Index"), 
         SCL_pst.6pp = labelled(SCL_pst.6pp, label = "SCL: Positive Symptom Total"), 
         SCL_psdi.6pp = labelled(SCL_psdi.6pp, label = "SCL: Positive Symptom Distress Index"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, contains("SCL") & !contains("_")) %>% arrange(value) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, SCL_som.6pp:SCL_psdi.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, SCL1.6pp:SCL90.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("SCL")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("SCL"))
```
::::
::::::

## STAI: State-Trait Anxiety Inventory

::::: panel-tabset
### Notes

-   Speilberger et al., 1993
-   20 items per scale (state/trait)
    -   6pp only includes state anxiety scale
-   1-4 Likert Scale
    -   1 = Not at all
    -   4 = Very much so
-   Sum score
    -   Higher scores = increased levels of anxiety
-   No subscales within state/trait scales
-   Reverse score items: 1, 2, 5, 8, 10, 11, 15, 16, 19, 20

### Script

#### Reverse item scores

```{r}
df <- df %>%
  mutate(across(c(STAI_s1.6pp, STAI_s2.6pp, STAI_s5.6pp, STAI_s8.6pp, STAI_s10.6pp, 
                   STAI_s11.6pp, STAI_s15.6pp, STAI_s16.6pp, STAI_s19.6pp, STAI_s20.6pp),
            ~5-.))

# Mark reversed scores with `_r`
setnames(x = df, 
                     old = c("STAI_s1.6pp", "STAI_s2.6pp", "STAI_s5.6pp", "STAI_s8.6pp", "STAI_s10.6pp", 
                             "STAI_s11.6pp", "STAI_s15.6pp", "STAI_s16.6pp", "STAI_s19.6pp", "STAI_s20.6pp"), 
                     new = gsub(pattern = ".6pp", 
                          replacement = "_r.6pp", 
                          x = c("STAI_s1.6pp", "STAI_s2.6pp", "STAI_s5.6pp", "STAI_s8.6pp", "STAI_s10.6pp", 
                             "STAI_s11.6pp", "STAI_s15.6pp", "STAI_s16.6pp", "STAI_s19.6pp", "STAI_s20.6pp")))
```

#### Calculate summary scores

```{r STAI-scales}
df <- df %>% 
  
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Tell R that STAI scores are numeric
  mutate(across(STAI_s1_r.6pp:STAI_s20_r.6pp, as.numeric)) %>%
  
  # Calculate total scores
  mutate(STAI_state.6pp = sum(c_across(STAI_s1_r.6pp:STAI_s20_r.6pp))) %>%
  
  # Move the summmary scores so they come immediately after the measures
  relocate(STAI_state.6pp, .after = STAI_s20_r.6pp)
```

### Label

```{r}
df <- df %>% 

  mutate(across(contains("STAI_s") & !contains("_r"),
            ~ labelled(., 
                     c("Not at all" = 1, 
                       "Somewhat" = 2, 
                       "Moderately so" = 3, 
                       "Very much so" = 4), 
                     label = "State-Trait Anxiety Index, State"))) %>%
  mutate(across(contains("STAI_s") & contains("_r"),
            ~ labelled(., 
                     c("Not at all" = 4, 
                       "Somewhat" = 3, 
                       "Moderately so" = 2, 
                       "Very much so" = 1), 
                     label = "State-Trait Anxiety Index, State (reverse-scored)"))) %>%
 
  # Summary
  mutate(STAI_state.6pp = labelled(STAI_state.6pp, label = "STAI: State Anxiety Total"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

###### Direct Scores

```{r}
#| echo: false
check_categorical(df, contains("STAI") & !contains("_r") & !contains("_state")) %>% knitr::kable()
```

###### Reverse Score

```{r}
#| echo: false
check_categorical(df, contains("STAI") & contains("_r")) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, STAI_state.6pp) %>% knitr::kable()
```

##### Check Reliability
###### State
```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, STAI_s1_r.6pp:STAI_s20_r.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("STAI")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(df, contains("STAI"))
```
::::
:::::

# HATCH-Designed Questions

## PRQ: Parenting Responsibilities Questionnaire

::::: panel-tabset
### Notes

-   Designed for HATCH
-   5 items
-   1-5 and 1-6 Likert Scales
    -   "Total time" questions are 1-6
    -   "Primary caregiver time" and share of time questions are 1-5
-   No summary score
-   No subscales
-   Reverse code: all items so that higher scores indicate more time
    spent with baby

### Script

#### Reverse Score Items

```{r}
df <- df %>% 
  mutate(across(c(PRQ_WeekTot.6pp, PRQ_WkendTot.6pp), 
                ~7-.)) %>%
  
  mutate(across(c(PRQ_WeekPrimary.6pp, PRQ_WkendPrimary.6pp, PRQ_Share.6pp), 
                ~6-.))
```

### Label

```{r}
df <- df %>% 
  # Weekday Hours
  mutate(PRQ_WeekTot.6pp = labelled(PRQ_WeekTot.6pp, 
                     c("8+ hours" = 6, 
                       "5-8 hours" = 5,
                       "3-4 hours" = 4, 
                       "2-3 hours" = 3, 
                       "1-2 hours" = 2, 
                       "0-1 hours" = 1),
                     label = "Waking hours with baby, average weekday")) %>%
  
  # Weekday Primary
  mutate(PRQ_WeekPrimary.6pp = labelled(PRQ_WeekPrimary.6pp, 
                     c("75-100%" = 5,
                       "50-75%" = 4, 
                       "About 50%" = 3, 
                       "25-50%" = 2, 
                       "0-25%" = 1),
                     label = "Percent of weekday hours spent alone with baby or as main caregiver")) %>%
  
    # Weekend Hours
  mutate(PRQ_WkendTot.6pp = labelled(PRQ_WkendTot.6pp, 
                     c("The whole day" = 6,
                       "8+ hours" = 5, 
                       "5-8 hours" = 4,
                       "3-4 hours" = 3, 
                       "1-3 hours" = 2, 
                       "0-1 hours" = 1),
                     label = "Waking hours with baby, average weekend day")) %>%
  
  # Weekend Primary
  mutate(PRQ_WkendPrimary.6pp = labelled(PRQ_WkendPrimary.6pp, 
                     c("75-100%" = 5,
                       "50-75%" = 4, 
                       "About 50%" = 3, 
                       "25-50%" = 2, 
                       "0-25%" = 1),
                     label = "Percent of weekend day hours spent alone with baby or as main caregiver")) %>%
  
  # Share of Infant Care
  mutate(PRQ_Share.6pp = labelled(PRQ_Share.6pp, 
                     c("I do 80% or more" = 5,
                       "I do 60% or more" = 4, 
                       "50-50" = 3, 
                       "I do 40% or less" = 2, 
                       "I do 20% or less" = 1),
                     label = "Compared to partner, what is your overall share of infant care")) 
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, PRQ_WeekTot.6pp) %>% knitr::kable()
check_categorical(df, PRQ_WkendTot.6pp) %>% knitr::kable()
check_categorical(df, contains("PRQ") & contains("Primary") & !contains("MRI")) %>% knitr::kable()
check_categorical(df, PRQ_Share.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, contains("PRQ") & !contains("MRI")), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PRQ") & !contains("MRI")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(PRQ_WeekTot.6pp)), contains("PRQ") & !contains("MRI"))
```
::::
:::::

## COVID Parenting Questions

:::::: panel-tabset
### Notes

-   Designed for HATCH
-   16 items
-   Mix of scales and open-ended
-   No summary score
-   No subscales
-   No reverse scores

### Script

::: panel-tabset
#### Recode `Precautions`

##### Recode Values

```{r}
# Create a named vector for replacements
replace_map <- c(
  "1" = "1",   # avoid social gathering
  "6" = "2",   # social distance
  "3" = "3",   # wfh
  "4" = "4",   # only go outside for essentials
  "13" = "5",  # cancelled medical appts
  "7" = "6",   # cancelled trips
  "9" = "7",   # cancelled events
  "10" = "8",  # changed hygiene habits
  "15" = "9",  # reduced baby's social contact with family
  "16" = "10", # reduced baby's social contact with friends
  "14" = "11"  # other
)

# Apply the replacements
df <- df %>%
  mutate(COVID_precautions.6pp = COVID_precautions.6pp %>%
           str_split(",") %>%  # Split the string into individual numbers
           map(~replace_map[.x]) %>%  # Replace each number using replace_map
           map_chr(~paste(.x, collapse = ","))) %>% # Combine back into a string
  mutate(COVID_precautions.6pp = na_if(COVID_precautions.6pp, "NA")) # convert "NA" to NA
```

##### Split Up Multi-Select

```{r}
df <- df %>%
  separate_wider_delim(COVID_precautions.6pp, 
  delim = ",", 
  names = paste0("COVID_precautions_", 1:11, ".6pp"),
  too_few = "align_start")
```

#### Recode `Impact`

##### Recode Values

```{r}
# Create a named vector for replacements
replace_map <- c(
  "1" = "1",   # Lost my job
  "11" = "2",  # Changes to my job
  "5" = "3",   # Changes in partner's employment
  "35" = "4",  # Decrease in household income
  "22" = "5",  # Changes in childcare arrangements
  "12" = "6",  # Decreased number of in-person healthcare visits
  "31" = "7",  # Worry about contracting COVID-19
  "18" = "8",  # Worry about a family member's health
  "30" = "9",  # Death of someone I am close to
  "29" = "10", # Loneliness
  "32" = "11"  # Boredom
)

# Apply the replacements
df <- df %>%
  mutate(COVID_impact.6pp = COVID_impact.6pp %>%
           str_split(",") %>%  # Split the string into individual numbers
           map(~replace_map[.x]) %>%  # Replace each number using replace_map
           map_chr(~paste(.x, collapse = ",")))  %>% # Combine back into a string
  mutate(COVID_impact.6pp = na_if(COVID_impact.6pp, "NA")) # convert "NA" to NA
```

##### Split Up Multi-Select

```{r}
df <- df %>%
  separate_wider_delim(COVID_impact.6pp, 
  delim = ",", 
  names = paste0("COVID_impact_", 1:7, ".6pp"),
  too_few = "align_start")
```

#### Split Up `Childcare` Multi-Select

```{r}
df <- df %>%
  separate_wider_delim(COVID_childcare.6pp, 
  delim = ",", 
  names = paste0("COVID_childcare_", 1:2, ".6pp"),
  too_few = "align_start")
```

#### Recode `Contact`

```{r}
df <- df %>%
  mutate(across(COVID_contact1.6pp:COVID_contact5.6pp, 
                ~ case_when(
                  . == 1 ~ 1, #much less
                  . == 4 ~ 2, #somewhat less
                  . == 2 ~ 3, #about the same
                  . == 3 ~ 4, #somewhat more
                  . == 5 ~ 5, #much more
                  .default = NA)))
```

#### Recode `Social`

```{r}
df <- df %>%
  mutate(COVID_social.6pp = case_when(
    COVID_social.6pp == 1 ~ 1, #very negative
    COVID_social.6pp == 14 ~ 2, #somewhat negative
    COVID_social.6pp == 15 ~ 3, #no impact
    COVID_social.6pp == 16 ~ 4, #somewhat positive
    COVID_social.6pp == 17 ~ 5, #very positive
    .default = NA))
```

#### Recode `Parenting`

```{r}
df <- df %>%
  mutate(COVID_parenting.6pp = COVID_parenting.6pp-1)
```

#### Recode `Work`

```{r}
df <- df %>%
  mutate(COVID_work.6pp = case_when(
    COVID_work.6pp == 5 ~ 3, #not currently working because pandemic
    COVID_work.6pp == 6 ~ 4, #on leave
    .default = COVID_work.6pp))
```

#### Recode `Contracted` & `Baby`

```{r}
df <- df %>%
  mutate(COVID_contracted.6pp = case_when(
    COVID_contracted.6pp == 1 ~ 1, #yes, tested
    COVID_contracted.6pp == 3 ~ 2, #yes, not tested
    COVID_contracted.6pp == 4 ~ 0, #no
    .default = NA)) %>%
  mutate(COVID_baby.6pp = case_when(
    COVID_baby.6pp == 3 ~ 0, #no
    .default = COVID_baby.6pp))
```
:::

### Label

#### Label `Precautions`

```{r}
# Define the labels with the new numbering (1-11)
vec_labels <- c(
  "Avoiding social gatherings" = 1,
  "Maintaining social distance" = 2,
  "Working from home" = 3,
  "Going outside only for essentials" = 4,
  "Cancelled or reduced medical care appointments" = 5,
  "Cancelled trips" = 6,
  "Cancelled events" = 7,
  "Changed hygiene habits" = 8,
  "Reduced baby's social contact with family" = 9,
  "Reduced baby's social contact with friends" = 10,
  "Other" = 11
)

# Apply labels
df <- df %>%
  mutate(across(COVID_precautions_1.6pp:COVID_precautions_11.6pp, ~as.numeric(.x))) %>%
  mutate(across(COVID_precautions_1.6pp:COVID_precautions_11.6pp, 
                ~ labelled(., 
                           labels = vec_labels,
                           label = "What precautions have you taken to avoid COVID-19 (multi-select)?"))) %>%
  mutate(COVID_precautions_text.6pp = labelled(COVID_precautions_text.6pp, label = "What precautions have you taken to avoid COVID-19 (open-ended for 'other')?"))
```

#### Label `Impact`

```{r}
# Define the labels with new numbering
vec_labels <- c(
  "Lost my job" = 1,
  "Changes to my job" = 2,
  "Changes in partner's employment" = 3,
  "Decrease in household income" = 4,
  "Changes in childcare arrangements" = 5,
  "Decreased number of in-person healthcare visits" = 6,
  "Worry about contracting COVID-19" = 7,
  "Worry about a family member's health" = 8,
  "Death of someone I am close to" = 9,
  "Loneliness" = 10,
  "Boredom" = 11
)

# Apply labels to COVID_impact without altering the original strings
df <- df %>%
  mutate(across(COVID_impact_1.6pp:COVID_impact_7.6pp, ~as.numeric(.x))) %>%
  mutate(across(COVID_impact_1.6pp:COVID_impact_7.6pp, 
                ~ labelled(., 
                           labels = vec_labels,
                           label = "What has occurred since your baby's birth as a result of COVID-19? (multi-select)")))
```

#### Label `Childcare`

```{r}
vec_labels <- c("I am spending more time taking care of my baby than previously planned" = 1, 
                "My partner is spending more time with my baby than previously planned" = 2, 
                "Someone else is spending more time with my baby than previously planned" = 3)

df <- df %>%
  mutate(across(COVID_childcare_1.6pp:COVID_childcare_2.6pp, ~as.numeric(.x))) %>%
  mutate(across(COVID_childcare_1.6pp:COVID_childcare_2.6pp, 
                ~ labelled(., 
                           labels = vec_labels,
                           label = "How have your childcare arrangements changed? (multi-select")))
```

#### Label `Contact`

```{r}
vec_labels <- c("Much less" = 1, 
                "Somewhat less" = 2, 
                "About the same" = 3, 
                "Somewhat more" = 4, 
                "Much more" = 5)

df <- df %>%
  mutate(COVID_contact1.6pp = 
           labelled(COVID_contact1.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with neighbors/community members?")) %>%
  mutate(COVID_contact2.6pp = 
           labelled(COVID_contact2.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with coworkers?")) %>%
  mutate(COVID_contact3.6pp = 
           labelled(COVID_contact3.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with close friends?")) %>%
  mutate(COVID_contact4.6pp = 
           labelled(COVID_contact4.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with your family?")) %>%
  mutate(COVID_contact5.6pp = 
           labelled(COVID_contact5.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with your partner?"))
  
```

#### Label `Social` & `Mental Health`

```{r}
vec_labels <- c("Very negative" = 1, 
                "Somewhat negative" = 2, 
                "No impact" = 3, 
                "Somewhat positive" = 4, 
                "Very positive" = 5)

df <- df %>%
  mutate(COVID_social.6pp = labelled(COVID_social.6pp, 
                                     vec_labels,
                                     label = "COVID's impact on your social relationships?")) %>%
  mutate(COVID_mh.6pp = labelled(COVID_mh.6pp, 
                                 vec_labels,
                                 label = "COVID's impact on your mental health"))
```

#### Label `Parenting` & `Work`

```{r}
df <- df %>%
  mutate(COVID_parenting.6pp = labelled(COVID_parenting.6pp, 
                                        c("Much worse" = 1, 
                                          "Slightly worse" = 2, 
                                          "No change" = 3, 
                                          "Slightly improved" = 4, 
                                          "Greatly improved" = 5), 
                                        label = "COVID's impact on experience of parenting")) %>%
  mutate(COVID_work.6pp = labelled(COVID_work.6pp, 
                                   c("Continuing work outside home" = 1, 
                                     "Working from home" = 2, 
                                     "Not working because of COVID" = 3, 
                                     "Not working because of parental leave" = 4), 
                                   label = "Current work situation"))
```

#### Label `Contracted` & `Baby` & `Open`

```{r}
vec_labels <- c("Yes, tested/diagnosed" = 1, 
                "Yes, not tested/diagnosed" = 2, 
                "No COVID" = 0)

df <- df %>%
  mutate(COVID_contracted.6pp = labelled(COVID_contracted.6pp, 
                                         vec_labels,
                                         label = "Have you contracted COVID-19 at any point since baby's birth?")) %>%
  mutate(COVID_baby.6pp = labelled(COVID_baby.6pp, 
                                   vec_labels, 
                                   label = "Has your baby contracted COVID-19?")) %>%
  mutate(COVID_open.6pp = labelled(COVID_open.6pp, label = "Open-ended about parenting during COVID"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Precautions
check_categorical(df, contains("COVID_precautions") & !contains("MRI") & !contains("text")) %>% arrange(value) %>% knitr::kable()

# Impact
check_categorical(df, COVID_impact_1.6pp:COVID_impact_7.6pp) %>% arrange(value) %>% knitr::kable()

# Childcare
check_categorical(df, contains("COVID_childcare") & !contains("MRI")) %>% arrange(value) %>% knitr::kable()

# Contact
check_categorical(df, contains("COVID_contact") & !contains("MRI")) %>% arrange(value) %>% knitr::kable()

# Social and Mental Health
check_categorical(df, !contains("MRI") & (contains("COVID_social") | contains("COVID_mh"))) %>% arrange(value) %>% knitr::kable()

# Parenting
check_categorical(df, COVID_parenting.6pp) %>% arrange(value) %>% knitr::kable()

# Work
check_categorical(df, COVID_work.6pp) %>% arrange(value) %>% knitr::kable()

# Contract and Baby
check_categorical(df, c(COVID_contracted.6pp, COVID_baby.6pp)) %>% arrange(value) %>% knitr::kable()
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("COVID") & !contains("MRI")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(COVID_precautions_1.6pp)), contains("COVID") & !contains("MRI"))
```
::::
::::::

## Life Experiences

::::: panel-tabset
### Notes

-   Designed for HATCH
-   3 items
-   Mix of scales and open-ended
-   No summary score
-   No subscales
-   No reverse scores

### Script

#### Recode item scores

```{r}
df <- df %>%
  mutate(LifeExperience_Occur.6pp = case_when(
    LifeExperience_Occur.6pp == 2 ~ 0, #no
    .default = LifeExperience_Occur.6pp)) %>%
  mutate(LifeExperience_Impact.6pp = case_when(
    LifeExperience_Impact.6pp == 5 ~ 4, 
    LifeExperience_Impact.6pp == 6 ~ 5, 
    LifeExperience_Impact.6pp == 7 ~ 6,
    .default = LifeExperience_Impact.6pp))
```

### Label

```{r}
df <- df %>%
  mutate(LifeExperience_Occur.6pp = labelled(LifeExperience_Occur.6pp,
                                             labels = c("Yes" = 1, "No" = 0), 
                                             label = "Have you experienced any major life events since your prenatal visit (besides the birth of your baby)?")) %>%
  
  mutate(LifeExperience_Describe.6pp = labelled(LifeExperience_Describe.6pp, 
                                                label = "Please describe the most important life event (open-ended)")) %>%
  
  mutate(LifeExperience_Impact.6pp = labelled(LifeExperience_Impact.6pp, 
                                              labels = c(
                                                "Really negative" = 1, 
                                                "Somewhat negative" = 2, 
                                                "A little negative" = 3, 
                                                "A little positive" = 4, 
                                                "Somehwat positive" = 5, 
                                                "Really positive" = 6),
                                              label = "What was the impact of this event?"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, LifeExperience_Occur.6pp) %>% arrange(value) %>% knitr::kable()

check_categorical(df, LifeExperience_Impact.6pp) %>% arrange(value) %>% knitr::kable()

```

##### Check `Life Experiences`

```{r}
#| echo: false
df %>%
  filter(!is.na(LifeExperience_Describe.6pp)) %>%
  select(CoupleID, Parent, LifeExperience_Describe.6pp) %>%
  kbl(centering = TRUE, align = c("c", "l", "l")) %>%
  kable_styling(bootstrap_options = c("hover", "condensed")) %>%
  column_spec(1, width = "auto", border_left = TRUE, border_right = TRUE) %>%
  column_spec(2, width = "auto", border_left = TRUE, border_right = TRUE) %>%
  column_spec(3, width = "auto", border_left = TRUE, border_right = TRUE) %>%
  row_spec(0, bold = TRUE, align = "center", extra_css = "border-bottom: 2px solid;") %>%
  scroll_box(height = "400px", width = "100%")
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("LifeExperience")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(LifeExperience_Occur.6pp)),  contains("LifeExperience"))
```
::::
:::::

# COVID MRI Questions

## General

::::: panel-tabset
### Notes

-   6 questions:
    -   Do you live with your baby? (binary)
    -   How often do you see your baby? (1-4 Likert)
    -   Does your baby cry more than 3 hours/day? (binary)
    -   Have you done any type of sleep training using the "cry it out"
        method? (binary)
    -   If you have used the "cry it out method", how old was the baby?
        (open-ended)
    -   If you have used the "cry it out method", how many nights have
        you done? (open-ended)

### Script

```{r}
df <- df %>%
  mutate(across(c(MRI_LiveWBaby.6pp, MRI_Cry.6pp, MRI_SleepTrain.6pp), 
                ~ case_when(
                  . == 2 ~ 0, 
                  .default = .))) %>%
  
  
  mutate(MRI_SeeBaby.6pp = 5-MRI_SeeBaby.6pp) %>%
  
  
  mutate(across(MRI_SleepTrainAge.6pp:MRI_SleepTrainDays.6pp, 
                ~ case_when(
                  CoupleID == 90 & Parent == "dad" ~ NA,
                  TRUE ~ .
                ))) %>%
  
  relocate(MRI_Cry.6pp:MRI_SleepTrainDays.6pp, .after = MRI_SeeBaby.6pp)
```

### Label

```{r}
df <- df %>%
  
  mutate(MRI_VisitDate.6pp = labelled(MRI_VisitDate.6pp, label = "Postpartum MRI Visit Date (Post-COVID)")) %>%
  mutate(MRI_LiveWBaby.6pp = labelled(MRI_LiveWBaby.6pp, 
                                      labels = c("Yes" = 1, 
                                                 "No" = 0), 
                                      label = "Are you currently living with your baby?  (COVID MRI Questions)")) %>%
  
  mutate(MRI_SeeBaby.6pp = labelled(MRI_SeeBaby.6pp, 
                                      labels = c("Daily" = 4, 
                                                 "2-3 times a day" = 3,
                                                 "1-2 times a week" = 2, 
                                                 "Less than once a week" = 1), 
                                      label = "How often do you see the baby?  (COVID MRI Questions)")) %>%
  
  mutate(MRI_Cry.6pp = labelled(MRI_Cry.6pp, 
                                      labels = c("Yes" = 1, 
                                                 "No" = 0), 
                                      label = "Does your baby cry more than 3 hours/day, for more than 3 days/week?  (COVID MRI Questions)")) %>%
  
  
  mutate(MRI_SleepTrain.6pp = labelled(MRI_SleepTrain.6pp, 
                                      labels = c("Yes" = 1, 
                                                 "No" = 0), 
                                      label = "Have you done any type of sleep training using the 'cry it out' method?  (COVID MRI Questions)")) %>%
  
  mutate(MRI_SleepTrainAge.6pp = labelled(MRI_SleepTrainAge.6pp, 
                                          label = "If you have used the 'cry it out method', how old was the baby when you used this method? (COVID MRI Questions)")) %>%
  
  mutate(MRI_SleepTrainDays.6pp = labelled(MRI_SleepTrainDays.6pp, 
                                          label = "If you have used the 'cry it out method', how many days/nights have you used this method? (COVID MRI Questions)"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, c(MRI_LiveWBaby.6pp, MRI_Cry.6pp, MRI_SleepTrain.6pp)) %>% arrange(value) %>% knitr::kable()

check_categorical(df, MRI_SeeBaby.6pp) %>% knitr::kable()
```

##### Check Open-Ended Questions

```{r}
#| echo: false
df %>%
  filter(!is.na(MRI_SleepTrainAge.6pp)) %>%
  select(CoupleID, Parent, MRI_SleepTrainAge.6pp, MRI_SleepTrainDays.6pp) %>%
  kbl(centering = TRUE, align = c("c", "l", "l")) %>%
  kable_styling(bootstrap_options = c("hover", "condensed")) %>%
  column_spec(1, width = "auto", border_left = TRUE, border_right = TRUE) %>%
  column_spec(2, width = "auto", border_left = TRUE, border_right = TRUE) %>%
  column_spec(3, width = "auto", border_left = TRUE, border_right = TRUE) %>%
  row_spec(0, bold = TRUE, align = "center", extra_css = "border-bottom: 2px solid;") %>%
  scroll_box(height = "400px", width = "100%")
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, MRI_LiveWBaby.6pp:MRI_SleepTrainDays.6pp) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(MRI_LiveWBaby.6pp)), MRI_LiveWBaby.6pp:MRI_SleepTrainDays.6pp)
```
::::
:::::

## PRQ: Parenting Responsibilities Questionnaire

::::: panel-tabset
### Notes

-   Designed for HATCH
-   5 items
-   1-5 and 1-6 Likert Scales
    -   “Total time” questions are 1-6
    -   “Primary caregiver time” and share of time questions are 1-5
-   No summary score
-   No subscales
-   Reverse code: all items so that higher scores indicate more time
    spent with baby

### Script

```{r}
df <- df %>% 
  mutate(across(c(MRI_PRQ_WeekTot.6pp, MRI_PRQ_WkendTot.6pp), 
                ~7-.)) %>%
  
  mutate(across(c(MRI_PRQ_WeekPrimary.6pp, MRI_PRQ_WkendPrimary.6pp, MRI_PRQ_Share.6pp), 
                ~6-.))
```

### Label

```{r}
df <- df %>% 
  # Weekday Hours
  mutate(MRI_PRQ_WeekTot.6pp = labelled(MRI_PRQ_WeekTot.6pp, 
                     c("8+ hours" = 6, 
                       "5-8 hours" = 5,
                       "3-4 hours" = 4, 
                       "2-3 hours" = 3, 
                       "1-2 hours" = 2, 
                       "0-1 hours" = 1),
                     label = "PRQ: Waking hours with baby, average weekday (COVID MRI Questions)")) %>%
  
  # Weekday Primary
  mutate(MRI_PRQ_WeekPrimary.6pp = labelled(MRI_PRQ_WeekPrimary.6pp, 
                     c("75-100%" = 5,
                       "50-75%" = 4, 
                       "About 50%" = 3, 
                       "25-50%" = 2, 
                       "0-25%" = 1),
                     label = "PRQ: Percent of weekday hours spent alone with baby or as main caregiver (COVID MRI Questions)")) %>%
  
    # Weekend Hours
  mutate(MRI_PRQ_WkendTot.6pp = labelled(MRI_PRQ_WkendTot.6pp, 
                     c("The whole day" = 6,
                       "8+ hours" = 5, 
                       "5-8 hours" = 4,
                       "3-4 hours" = 3, 
                       "1-3 hours" = 2, 
                       "0-1 hours" = 1),
                     label = "PRQ: Waking hours with baby, average weekend day (COVID MRI Questions)")) %>%
  
  # Weekend Primary
  mutate(MRI_PRQ_WkendPrimary.6pp = labelled(MRI_PRQ_WkendPrimary.6pp, 
                     c("75-100%" = 5,
                       "50-75%" = 4, 
                       "About 50%" = 3, 
                       "25-50%" = 2, 
                       "0-25%" = 1),
                     label = "PRQ: Percent of weekend day hours spent alone with baby or as main caregiver (COVID MRI Questions)")) %>%
  
  # Share of Infant Care
  mutate(MRI_PRQ_Share.6pp = labelled(MRI_PRQ_Share.6pp, 
                     c("I do 80% or more" = 5,
                       "I do 60% or more" = 4, 
                       "50-50" = 3, 
                       "I do 40% or less" = 2, 
                       "I do 20% or less" = 1),
                     label = "PRQ: Compared to partner, what is your overall share of infant care (COVID MRI Questions)")) 
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, MRI_PRQ_WeekTot.6pp) %>% knitr::kable()
check_categorical(df, MRI_PRQ_WkendTot.6pp) %>% knitr::kable()
check_categorical(df, contains("MRI_PRQ") & contains("Primary")) %>% knitr::kable()
check_categorical(df, MRI_PRQ_Share.6pp) %>% knitr::kable()
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PRQ") & contains("MRI")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(MRI_LiveWBaby.6pp)),contains("MRI_PRQ"))
```
::::
:::::

## PSQI: Pittsburgh Sleep Quality Index

::::::::: panel-tabset
### Notes

-   Buysee et al., 1989
-   9 items (item 5 has A-J)
-   0-3 Likert scale
    -   Items 1-4 are open-ended
    -   Items 5-8: 0 = not during the past month; 3 = three or more
        times a week
    -   Item 9: 0 = very good; 3 = very bad
-   Sum score of "components"
    -   For global PSQI, a score over 5 indicates poor sleep quality
    -   See below for component score calculations
-   No reverse scores
-   Other notes:
    -   Item 1: if they listed a range of times, we took the average
    -   Item 2: if they listed a range of times, we took the average
    -   Item 3: if they listed a range of times, we took the average
    -   Item 4: if they listed a range of times, we took the average
    -   Component 5: I replaced missing values in 5b-5j with the mean of
        5b-5j and then took the sum before recoding

### Script

::::: panel-tabset
#### Recode item scores/responses

::: panel-tabset
##### Item 1

```{r}
df <- df %>%
  
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(MRI_PSQI1_raw.6pp = MRI_PSQI1.6pp, .after = MRI_PSQI1.6pp) %>%
  
  # Create helper variable that standardizes time
  clean_time_range(MRI_PSQI1.6pp) %>% # creates helper_clean variable
  
  # Create helper variables that split up ranges 
  extract_time_range(helper_clean) %>% # creates helper_start and helper_end variables
  
  # Convert helpers to military time
  convert_to_military_night(c("helper_start", "helper_end")) %>%
  
  # Rewrite PSQI1.6pp as midpoint or start time 
  finalize_time(c("helper_start", "helper_end"), "MRI_PSQI1.6pp") %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(MRI_PSQI1_raw.6pp, .after = MRI_PSQI9.6pp)
```

##### Item 2

```{r}
df <- df %>%
 
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(MRI_PSQI2_raw.6pp = MRI_PSQI2.6pp, .after = MRI_PSQI2.6pp) %>%
  
  # Create helper variable that standardizes times, ranges, and units
  standardize_latency(MRI_PSQI2.6pp) %>%
  
  # Extract time range
  extract_latency_times(helper_clean) %>%
  
  # Convert to minutes
  convert_to_minutes(helper_start, helper_end, helper_unit) %>%
  
  # Finalize MRI_PSQI2.6pp
  finalize_latency(MRI_PSQI2.6pp, helper_start, helper_end) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(MRI_PSQI2_raw.6pp, .after = MRI_PSQI1_raw.6pp)
```

##### Item 3

```{r}
df <- df %>%
  
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(MRI_PSQI3_raw.6pp = MRI_PSQI3.6pp, .after = MRI_PSQI3.6pp)  %>%
  
  # Create helper variable that standardizes time
  clean_time_range(MRI_PSQI3.6pp) %>% # creates helper_clean variable
  
  # Create helper variables that split up ranges 
  extract_time_range(helper_clean) %>% # creates helper_start and helper_end variables
  
  # Convert helpers to military time
  convert_to_military_morning(c("helper_start", "helper_end")) %>%
  
  # Rewrite MRI_PSQI3.6pp as midpoint or start time 
  finalize_time(c("helper_start", "helper_end"), "MRI_PSQI3.6pp") %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(MRI_PSQI3_raw.6pp, .after = MRI_PSQI2_raw.6pp)
```

##### Item 4

```{r}
df <- df %>%
  
  ungroup() %>%
  
  # Create raw variable that duplicates original column for reference
  mutate(MRI_PSQI4_raw.6pp = MRI_PSQI4.6pp, .after = MRI_PSQI4.6pp)  %>%
  
  # Create helper variable that standardizes time
  standardize_hours(MRI_PSQI4.6pp) %>%
  
  # Create helper variables that split up ranges 
  extract_hours(helper_clean) %>%
  
  # Rewrite MRI_PSQI4.6pp as midpoint or start time 
  finalize_hours(MRI_PSQI4.6pp, helper_start, helper_end) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(MRI_PSQI4_raw.6pp, .after = MRI_PSQI3_raw.6pp)
```

##### Items 5-9

```{r}
df <- df %>%
  
  rowwise() %>%
  
  # Recode values
  mutate(across(MRI_PSQI5a.6pp:MRI_PSQI9.6pp, 
            ~ case_when(
                     . == 1 ~ 0,
                     . == 2 ~ 1, 
                     . == 3 ~ 2, 
                     . == 4 ~ 3, 
                     .default = NA))) %>%
  
  # Convert MRI_PSQI5j to 0 when blank (per Buysse 2005) 
  mutate(MRI_PSQI5j.6pp = case_when(
    is.na(MRI_PSQI5j.6pp) == T & is.na(MRI_PSQI5a.6pp) == F ~ 0, 
    is.na(MRI_PSQI5a.6pp) == T ~ NA, 
    .default = MRI_PSQI5j.6pp)) 
```
:::

#### Calculate component scores

::: panel-tabset
##### Component 1: Overall Quality

-   Equal to PSQI9

```{r}
df <- df %>%
  mutate(MRI_PSQI_qual.6pp = MRI_PSQI9.6pp)%>%
  relocate(MRI_PSQI_qual.6pp, .after = MRI_PSQI4_raw.6pp)
```

##### Component 2: Latency

-   First transform MRI_PSQI2
-   Then add transformed score to MRI_PSQI5a
-   Finally transform the sum

```{r}
df <- df %>%
  
  rowwise() %>%
  
  # Step 1: MRI_PSQI2 score transformed to <15m=0; 16-30m=1; 31-60m=2; >60m=3
  mutate(MRI_PSQI_c2_helper = 
           case_when(
             MRI_PSQI2.6pp <= 15 ~ 0, 
             MRI_PSQI2.6pp > 15 & MRI_PSQI2.6pp <=30 ~ 1,
             MRI_PSQI2.6pp > 30 & MRI_PSQI2.6pp <= 60 ~ 2, 
             MRI_PSQI2.6pp > 60 ~ 3,
             .default = NA)) %>%
  
  # Step 2: Add score from step #1 to MRI_PSQI5a
  mutate(MRI_PSQI_c2_helper2 = MRI_PSQI_c2_helper + MRI_PSQI5a.6pp) %>%
  
  # Step 3: Combined score transformed to 0=0; 1-2=1; 3-4=2; 5-6=3
  mutate(MRI_PSQI_lat.6pp = 
           case_when(
             MRI_PSQI_c2_helper2 == 0 ~ 0, 
             MRI_PSQI_c2_helper2 == 1 | MRI_PSQI_c2_helper2 == 2 ~ 1, 
             MRI_PSQI_c2_helper2 == 3 | MRI_PSQI_c2_helper2 == 4 ~ 2, 
             MRI_PSQI_c2_helper2 == 5 | MRI_PSQI_c2_helper2 == 6 ~ 3)) %>%
  
  # Clean Up
  select(-contains("helper")) %>%
  relocate(MRI_PSQI_lat.6pp, .after = MRI_PSQI_qual.6pp)
```

##### Component 3: Duration

-   Transform MRI_PSQI4

```{r}
df <- df %>%
  
  rowwise() %>%
  
  mutate(MRI_PSQI_dur.6pp =
           case_when(MRI_PSQI4.6pp > 7 ~ 0, 
                     MRI_PSQI4.6pp <= 7 & MRI_PSQI4.6pp > 6 ~ 1, 
                     MRI_PSQI4.6pp <= 6 & MRI_PSQI4.6pp > 5 ~ 2, 
                     MRI_PSQI4.6pp <= 5 ~ 3, 
                     .default = NA)) %>%
  
  # Clean up 
  relocate(MRI_PSQI_dur.6pp, .after = MRI_PSQI_lat.6pp)
```

##### Component 4: Efficiency

-   First calculate time in bed (MRI_PSQI3-MRI_PSQI1)
-   Then divide MRI_PSQI4 by time in bed and multiply by 100
-   Finally transform the percentage

```{r}
df <- df %>%
  
  rowwise() %>%
  
  # Add fake date so that R knows that parents are waking up the day after they go to bed 
  mutate(MRI_PSQI_pm_helper = as.POSIXct(chron(dates. = "06/26/2022", times. = MRI_PSQI1.6pp))+25200) %>%
  mutate(MRI_PSQI_am_helper = as.POSIXct(chron(dates. = "06/27/2022", times. = MRI_PSQI3.6pp))+25200) %>%
  
  # Tell R that parents who go to bed after midnight are actually sleeping the following day
  mutate(MRI_PSQI_pm_helper = as.POSIXct(case_when(
    MRI_PSQI_pm_helper <= "2022-06-26 13:00:00" ~ MRI_PSQI_pm_helper+86400, 
    .default = MRI_PSQI_pm_helper), 
    origin = "1970-01-01")) %>%
  
  # Calculate hours in bed
  mutate(MRI_PSQI_hib_helper = as.numeric(difftime(MRI_PSQI_am_helper, MRI_PSQI_pm_helper, units = "hours"))) %>%
  
  # Divide sleeping hours by hours in bed
  mutate(MRI_PSQI_c4_helper = (MRI_PSQI4.6pp/MRI_PSQI_hib_helper)*100) %>%
  
  # Recode 4
  mutate(MRI_PSQI_effic.6pp = case_when(
    MRI_PSQI_c4_helper >= 85 ~ 0,
    MRI_PSQI_c4_helper < 85 & MRI_PSQI_c4_helper >= 75 ~ 1, 
    MRI_PSQI_c4_helper < 75 & MRI_PSQI_c4_helper >= 65 ~ 2, 
    MRI_PSQI_c4_helper < 65 ~ 3, 
    .default = NA)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(MRI_PSQI_effic.6pp, .after = MRI_PSQI_dur.6pp)
```

##### Component 5: Disturbance

-   First sum scores 5b through 5j
-   Then transform the sum

```{r}
df <- df %>% 
  
  rowwise() %>%
  
  # Calculate 5
  mutate(MRI_PSQI_c5_helper = sum(c_across(MRI_PSQI5b.6pp:MRI_PSQI5j.6pp))) %>%
  
  # Recode 5
  mutate(MRI_PSQI_disturb.6pp = case_when(
    MRI_PSQI_c5_helper == 0 ~ 0, 
    MRI_PSQI_c5_helper >= 1 & MRI_PSQI_c5_helper <= 9 ~ 1, 
    MRI_PSQI_c5_helper > 9 & MRI_PSQI_c5_helper <= 18 ~ 2, 
    MRI_PSQI_c5_helper > 18 ~ 3, 
    .default = NA)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(MRI_PSQI_disturb.6pp, .after = MRI_PSQI_effic.6pp)
```

##### Component 6: Meds

-   Equal to MRI_PSQI6

```{r}
df <- df %>%
  mutate(MRI_PSQI_med.6pp = MRI_PSQI6.6pp) %>%
  
  # Clean up
  relocate(MRI_PSQI_med.6pp, .after = MRI_PSQI_disturb.6pp)
```

##### Component 7: Dysfunction during Day

-   First add MRI_PSQI7 and MRI_PSQI8
-   Then transform the sum

```{r}
df <- df %>%
  
  rowwise() %>%
  
  mutate(MRI_PSQI_c7_helper = sum(c(MRI_PSQI7.6pp, MRI_PSQI8.6pp))) %>%
  
  mutate(MRI_PSQI_daydys.6pp = case_when(
    MRI_PSQI_c7_helper == 0 ~ 0,
    MRI_PSQI_c7_helper == 1 | MRI_PSQI_c7_helper == 2 ~ 1, 
    MRI_PSQI_c7_helper == 3 | MRI_PSQI_c7_helper == 4 ~ 2, 
    MRI_PSQI_c7_helper == 5 | MRI_PSQI_c7_helper == 6 ~ 3, 
    .default = NA)) %>%
  
  # Remove helper variables
  select(-contains("helper")) %>%
  relocate(MRI_PSQI_daydys.6pp, .after = MRI_PSQI_med.6pp)
```
:::

#### Calculate Global Score

```{r}
df <- df %>%
  rowwise() %>%
  
  # Calculate total score
  mutate(MRI_PSQI_global.6pp = sum(c_across(MRI_PSQI_qual.6pp:MRI_PSQI_daydys.6pp))) %>%
  
  # Clean up
  relocate(MRI_PSQI_global.6pp, .after = MRI_PSQI_daydys.6pp)
```
:::::

### Label

```{r}
df <- df %>%
  
  # Items 1-4
  mutate(MRI_PSQI2.6pp = labelled(MRI_PSQI2.6pp, label = "PSQI: Minutes to fall asleep (COVID MRI Questions)"),
         MRI_PSQI4.6pp = labelled(MRI_PSQI4.6pp, label = "PSQI: Hours of actual sleep (COVID MRI Questions)")) %>%
  
  
  # Items 1-4 (raw)
  mutate(MRI_PSQI1_raw.6pp = labelled(MRI_PSQI1_raw.6pp, label = "PSQI: Bedtime (raw; COVID MRI Questions)"),
         MRI_PSQI2_raw.6pp = labelled(MRI_PSQI2_raw.6pp, label = "PSQI: Minutes to fall asleep (raw; COVID MRI Questions)"),
         MRI_PSQI3_raw.6pp = labelled(MRI_PSQI3_raw.6pp, label = "PSQI: Wake time (raw; COVID MRI Questions)"),
         MRI_PSQI4_raw.6pp = labelled(MRI_PSQI4_raw.6pp, label = "PSQI: Hours of actual sleep (raw; COVID MRI Questions)")) %>%
  
  # Items 5a-5J
  mutate(across(MRI_PSQI5a.6pp:MRI_PSQI5j.6pp,
                ~ labelled(., 
                           label = "PSQI: Reasons for trouble sleeping (COVID MRI Questions)",
                           labels = c("Not during the last month" = 0,
                                      "Less than once a week" = 1, 
                                      "Once or twice a week" = 2, 
                                      "Three or more times a week" = 3)))) %>%
  
  # Items 6-8
  mutate(across(MRI_PSQI6.6pp:MRI_PSQI8.6pp, 
                ~ labelled(., 
                           label = "PSQI: Misc. questions (COVID MRI Questions)",
                           labels = c("Not during the last month" = 0,
                                      "Less than once a week" = 1, 
                                      "Once or twice a week" = 2, 
                                      "Three or more times a week" = 3)))) %>%
  
  # Item 9 
  mutate(MRI_PSQI9.6pp = labelled(MRI_PSQI9.6pp, 
                              label = "PSQI: How would you rate your sleep quality? (COVID MRI Questions)", 
                              labels = c("Very good" = 0,
                                         "Fairly good" = 1, 
                                         "Fairly bad" = 2, 
                                         "Very bad" = 3))) %>%
  
  # Components
  mutate(MRI_PSQI_qual.6pp = labelled(MRI_PSQI_qual.6pp, label = "PSQI: Component 1, Sleep Quality (COVID MRI Questions)"),
         MRI_PSQI_lat.6pp = labelled(MRI_PSQI_lat.6pp, label = "PSQI: Component 2, Sleep Latency (COVID MRI Questions)"),
         MRI_PSQI_dur.6pp = labelled(MRI_PSQI_dur.6pp, label = "PSQI: Component 3, Sleep Duration (COVID MRI Questions)"),
         MRI_PSQI_effic.6pp = labelled(MRI_PSQI_effic.6pp, label = "PSQI: Component 4, Sleep Efficiency (COVID MRI Questions)"),
         MRI_PSQI_disturb.6pp = labelled(MRI_PSQI_disturb.6pp, label = "PSQI: Component 5, Sleep Disturbance (COVID MRI Questions)"),
         MRI_PSQI_med.6pp = labelled(MRI_PSQI_med.6pp, label = "PSQI: Component 6, Sleep Medication (COVID MRI Questions)"),
         MRI_PSQI_daydys.6pp = labelled(MRI_PSQI_daydys.6pp, label = "PSQI: Component 7, Dysfunction during the Day (COVID MRI Questions)"),
         MRI_PSQI_global.6pp = labelled(MRI_PSQI_global.6pp, label = "Pittsburgh Sleep Quality Index: Global Score (COVID MRI Questions)"))
```

### Check and Print

::::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false

check_categorical(df, MRI_PSQI5a.6pp:MRI_PSQI8.6pp) %>% arrange(value) %>% knitr::kable()
check_categorical(df, MRI_PSQI9.6pp)%>% arrange(value) %>% knitr::kable()

```

##### Check Numbers

```{r}
#| echo: false

check_continuous(df, MRI_PSQI_global.6pp) %>% knitr::kable()
```

##### Check Reliability

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, MRI_PSQI_qual.6pp:MRI_PSQI_daydys.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("MRI_PSQI"))
```
:::

#### Print

::: panel-tabset
##### 1: Quality

```{r}
#| echo: false
print_slice(df, MRI_PSQI9.6pp, MRI_PSQI_qual.6pp)
```

##### 2: Latency

```{r}
#| echo: false
print_slice(df, MRI_PSQI2.6pp, MRI_PSQI5a.6pp, MRI_PSQI_lat.6pp)
```

##### 3: Duration

```{r}
#| echo: false
print_slice(df, MRI_PSQI4.6pp, MRI_PSQI_dur.6pp)
```

##### 4: Efficiency

```{r}
#| echo: false
print_slice(df, MRI_PSQI1_raw.6pp, MRI_PSQI3_raw.6pp, MRI_PSQI4.6pp, MRI_PSQI_effic.6pp)
```

##### 5: Disturbance

```{r}
#| echo: false
print_slice(df, MRI_PSQI5b.6pp:MRI_PSQI5j.6pp, MRI_PSQI_disturb.6pp)
```

##### 6: Medication

```{r}
#| echo: false
print_slice(df, MRI_PSQI6.6pp, MRI_PSQI_med.6pp)
```

##### 7: Dysfunction during the day

```{r}
#| echo: false
print_slice(df, MRI_PSQI7.6pp, MRI_PSQI8.6pp, MRI_PSQI_daydys.6pp)
```

##### Global PSQI

```{r}
#| echo: false
print_slice(df, MRI_PSQI_qual.6pp:MRI_PSQI_global.6pp)
```
:::
:::::
:::::::::

## PYB: Parenting Your Baby

::::: panel-tabset
### Notes

-   Formerly "PARYC: Parenting Young Children"
-   Guyon-Harris et al., 2023
-   16 items + 2 "desire for change" items
-   The original scale is 1-7 Likert, but for COVID questions they were
    changed to 1-3
    -   1 = Not at all
    -   3 = Most of the time
-   Mean score
    -   Higher scores = More frequent positive parenting behaviors
    -   "Desire for change": higher scores = greater desire for change
-   Subscales:
    -   Supporting and enjoying your baby (se)
    -   Planning ahead with your baby (pa)
    -   Change items not included in either subscale
-   Reverse score: both change items

### Script

#### Reverse Item Scores

```{r}
df<- df %>%
  mutate(across(c(MRI_PYB_se_change.6pp, MRI_PYB_pa_change.6pp), 
                ~ 8 - .))
```

#### Calculate Summary Scores

```{r}
df <- df %>%
  # Tell R that we want to take the mean across a row
  rowwise() %>%
  
  # Calculate total scores/subscales
  mutate(MRI_PYB_se.6pp = round(mean(c_across(MRI_PYB_se1.6pp:MRI_PYB_se8.6pp), na.rm = T), 3),
         MRI_PYB_pa.6pp = round(mean(c_across(MRI_PYB_pa1.6pp:MRI_PYB_pa8.6pp), na.rm = T), 3), 
         MRI_PYB_tot.6pp = round(mean(c(MRI_PYB_se.6pp, MRI_PYB_pa.6pp), na.rm = T), 3)) %>%
  
  # Move the total score/subscales so they come immediately after the measures
  relocate(MRI_PYB_se.6pp:MRI_PYB_tot.6pp, .after = MRI_PYB_pa_change.6pp)
```

### Label

```{r}
df <- df %>%
  # Create value and variable labels
  mutate(across(MRI_PYB_se1.6pp:MRI_PYB_se8.6pp, 
            ~ labelled(., 
                    labels = c("Not at all" = 1, 
                               "Sometimes" = 2,
                               "Most of the time" = 3), 
                     label = "PYB: Supporting and Enjoying Baby (COVID MRI Questions)"))) %>%
  mutate(across(MRI_PYB_pa1.6pp:MRI_PYB_pa8.6pp, 
            ~ labelled(., 
                     c("Not at all" = 1, 
                       "Sometimes" = 2,
                       "Most of the time" = 3), 
                     label = "PYB: Planning Ahead (COVID MRI Questions)"))) %>%
  mutate(MRI_PYB_pa_extra.6pp = labelled(MRI_PYB_pa_extra.6pp, label = "PYB: dropped from final scale (COVID MRI Questions)")) %>%
  mutate(MRI_PYB_se_change.6pp = labelled(MRI_PYB_se_change.6pp, 
                                      c("Fine as is" = 1,
                                        "Almost fine as is" = 2,
                                        "Mostly okay" = 3,
                                        "Some changes needed" = 4,
                                        "Want a few changes" = 5,
                                        "Want a lot of changes" = 6,
                                        "Really want some changes" = 7), 
                                  label = "PYB Supporting/Enjoying: Would you do things differently? (COVID MRI Questions)")) %>%
  mutate(MRI_PYB_pa_change.6pp = labelled(MRI_PYB_pa_change.6pp, 
                                      c("Fine as is" = 1,
                                        "Almost fine as is" = 2,
                                        "Mostly okay" = 3,
                                        "Some changes needed" = 4,
                                        "Want a few changes" = 5,
                                        "Want a lot of changes" = 6,
                                        "Really want some changes" = 7), 
                                  label = "PYB Planning Ahead: Would you do things differently? (COVID MRI Questions)")) %>%
  mutate(MRI_PYB_se.6pp = labelled(MRI_PYB_se.6pp, label = "PYB: Supporting and Enjoying Baby Subscale (COVID MRI Questions)")) %>%
  mutate(MRI_PYB_pa.6pp = labelled(MRI_PYB_pa.6pp, label = "PYB: Planning Ahead Subscale (COVID MRI Questions)")) %>%
  mutate(MRI_PYB_tot.6pp = labelled(MRI_PYB_tot.6pp, label = "PYB: Overall Mean (COVID MRI Questions)"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, c(MRI_PYB_se1.6pp:MRI_PYB_se8.6pp, MRI_PYB_pa1.6pp:MRI_PYB_pa8.6pp)) %>% arrange(value) %>% knitr::kable()

check_categorical(df, c(MRI_PYB_se_change.6pp, MRI_PYB_pa_change.6pp)) %>% arrange(value) %>% knitr::kable()
```

##### Check Numbers

```{r}
#| echo: false
check_continuous(df, MRI_PYB_se.6pp, MRI_PYB_pa.6pp, MRI_PYB_tot.6pp) %>% knitr::kable()
```

##### Check Reliability

###### Support/Enjoy

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, MRI_PYB_se1.6pp:MRI_PYB_se8.6pp), na.rm = T)
```

###### Planning Ahead

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, MRI_PYB_pa1.6pp:MRI_PYB_pa8.6pp), na.rm = T)
```

###### Overall Mean

```{r}
#| echo: false
ltm::cronbach.alpha(data = select(df, MRI_PYB_se1.6pp:MRI_PYB_se8.6pp, MRI_PYB_pa1.6pp:MRI_PYB_pa8.6pp), na.rm = T)
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("PYB") & contains("MRI")) 
```
:::

#### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(MRI_LiveWBaby.6pp)),contains("MRI_PYB"))
```
::::
:::::

## Household Composition

:::::: panel-tabset
### Notes

-   Three questions
    -   Are you currently in a relationship with your baby's other
        parent?
    -   Who currently lives in your househodl besides yourself?
    -   How many people live in your house all together?

### Script

::: panel-tabset
#### Recode `RelStat`

```{r}
df <- df %>%
  mutate(MRI_RelStat.6pp = case_when(
    MRI_RelStat.6pp == 4 ~ 0, #no longer together
    .default = MRI_RelStat.6pp
  ))
```

### Recode `Household`

#### Recode Values

```{r}
# Create a named vector for replacements
replace_map <- c(
  "4" = "1",   # partner
  "10" = "2",  # baby
  "5" = "3",   # children/stepchildren
  "6" = "4",   # other extended family
  "8" = "5"    # other friends/roommates
)

# Apply the replacements
df <- df %>%
  
  mutate(MRI_Household.6pp = MRI_Household.6pp %>%
           str_split(",") %>%  # Split the string into individual numbers
           map(~replace_map[.x]) %>%  # Replace each number using replace_map
           map_chr(~paste(.x, collapse = ","))) %>% # Combine back into a string
  mutate(MRI_Household.6pp = na_if(MRI_Household.6pp, "NA")) # convert "NA" to NA
```

##### Split Up Multi-Select

```{r}
df <- df %>%
  separate_wider_delim(MRI_Household.6pp, 
  delim = ",", 
  names = paste0("MRI_Household_", 1:3, ".6pp"),
  too_few = "align_start")
```

##### Rename and Recode

```{r}
df <- df %>%
  mutate(MRI_Household_Partner.6pp = case_when(
    MRI_Household_1.6pp == 1 ~ 1, 
    CoupleID == 93 & Parent == "dad" ~ 0, 
    .default = NA)) %>%
  mutate(MRI_Household_Baby.6pp = case_when(
    MRI_Household_2.6pp == 2 ~ 1, 
    CoupleID == 93 & Parent == "dad" ~ 0, 
    .default = NA
  )) %>%
  mutate(MRI_Household_ExtFam.6pp = case_when(
    CoupleID == 93 & Parent == "dad" ~ 1, 
    MRI_Household_3.6pp == 4 ~ 1, 
    is.na(MRI_Household_1.6pp) == F & is.na(MRI_Household_3.6pp) == T ~ 0,
    .default = NA
  )) %>%
  
  # Clean Up
  relocate(MRI_Household_Partner.6pp:MRI_Household_ExtFam.6pp, .after = MRI_RelStat.6pp) %>%
  select(-c(MRI_Household_1.6pp:MRI_Household_3.6pp))
```

#### Recode `Household N`

```{r}
df <- df %>%
  mutate(MRI_HouseholdN.6pp = case_when(
    MRI_HouseholdN.6pp == 4 ~ 2, 
    MRI_HouseholdN.6pp == 5 ~ 3,
    MRI_HouseholdN.6pp == 6 ~ 4, 
    MRI_HouseholdN.6pp == 7 ~ 5,
    .default = NA))
```
:::

### Label

```{r}
df <- df %>%
  mutate(MRI_RelStat.6pp = labelled(MRI_RelStat.6pp, 
                                    labels = c("Married/Domestic Partnership" = 1, 
                                               "Cohabitating" = 2, 
                                               "Non-Cohabitating" = 3,
                                               "Not together" = 0), 
                                    label = "Relationship Status with Baby's Parent (COVID MRI Questions)")) %>%
  
  mutate(MRI_Household_Partner.6pp = labelled(MRI_Household_Partner.6pp, 
                                              labels = c("Yes" = 1, 
                                                         "No" = 0), 
                                              label = "Does your partner live in your home? (COVID MRI Questions)"), 
         MRI_Household_Baby.6pp = labelled(MRI_Household_Baby.6pp, 
                                              labels = c("Yes" = 1, 
                                                         "No" = 0), 
                                              label = "Does your baby live in your home? (COVID MRI Questions)"), 
         MRI_Household_ExtFam.6pp = labelled(MRI_Household_ExtFam.6pp, 
                                              labels = c("Yes" = 1, 
                                                         "No" = 0), 
                                              label = "Do any extended family members live in your home? (COVID MRI Questions)")) %>%
  
  mutate(MRI_HouseholdN.6pp = labelled(MRI_HouseholdN.6pp, 
                                       labels = c("Two" = 2, 
                                                  "Three" = 3, 
                                                  "Four" = 4, 
                                                  "Five or more" = 5), 
                                       label = "How many people live in your household altogether? (COVID MRI Questions)"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
check_categorical(df, MRI_RelStat.6pp) %>% arrange(value) %>% knitr::kable()
check_categorical(df, MRI_Household_Partner.6pp:MRI_Household_ExtFam.6pp) %>% arrange(value) %>% knitr::kable()
check_categorical(df, MRI_HouseholdN.6pp) %>% arrange(value) %>% knitr::kable()
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, MRI_RelStat.6pp:MRI_HouseholdN.6pp) 
```
:::

##### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(MRI_LiveWBaby.6pp)), MRI_RelStat.6pp:MRI_HouseholdN.6pp)
```
::::
::::::

## COVID Parenting Questions

:::::: panel-tabset
### Notes

-   COVID contact
-   COVID social
-   COVID impact
-   COVID mental health
-   COVID precautions
-   COVID precaution intensity
-   COVID contracted

### Script

::: panel-tabset
#### Recode `Contact`

```{r}
df <- df %>%
  mutate(across(MRI_COVID_contact1.6pp:MRI_COVID_contact5.6pp, 
                ~ case_when(
                  . == 1 ~ 1, #much less
                  . == 4 ~ 2, #somewhat less
                  . == 2 ~ 3, #about the same
                  . == 3 ~ 4, #somewhat more
                  . == 5 ~ 5, #much more
                  .default = NA)))
```

#### Recode `Social`

```{r}
df <- df %>%
  mutate(MRI_COVID_social.6pp = case_when(
    MRI_COVID_social.6pp == 1 ~ 1, #very negative
    MRI_COVID_social.6pp == 14 ~ 2, #somewhat negative
    MRI_COVID_social.6pp == 15 ~ 3, #no impact
    MRI_COVID_social.6pp == 16 ~ 4, #somewhat positive
    MRI_COVID_social.6pp == 17 ~ 5, #very positive
    .default = NA))
```

#### Recode `Impact`

##### Recode Values

```{r}
# Create a named vector for replacements
replace_map <- c(
  "1" = "1",    # Lost my job
  "11" = "2",   # Changes to my job
  "5" = "3",    # Changes in partner's employment
  "35" = "4",   # Decrease in household income
  "22" = "5",   # Pregnancy or postpartum health concerns
  "10" = "6",   # Decreased number of prenatal or postpartum care visits
  "12" = "7",   # One or more remote healthcare visits
  "13" = "8",   # Change in birth plan
  "17" = "9",   # Decreased exercise due to COVID-19 constraints
  "31" = "10",  # Worry about contracting COVID-19
  "18" = "11",  # Worry about a family member's health
  "30" = "12",  # Death of someone I am close to
  "29" = "13",  # Loneliness
  "32" = "14"   # Boredom
)

# Apply the replacements
df <- df %>%
  mutate(MRI_COVID_impact.6pp = MRI_COVID_impact.6pp %>%
           str_split(",") %>%  # Split the string into individual numbers
           map(~replace_map[.x]) %>%  # Replace each number using replace_map
           map_chr(~paste(.x, collapse = ",")))  %>% # Combine back into a string
  mutate(MRI_COVID_impact.6pp = na_if(MRI_COVID_impact.6pp, "NA")) # convert "NA" to NA
```

##### Split Up Multi-Select

```{r}
df <- df %>%
  separate_wider_delim(MRI_COVID_impact.6pp, 
  delim = ",", 
  names = paste0("MRI_COVID_impact_", 1:7, ".6pp"),
  too_few = "align_start")
```

#### Recode `Precautions`

##### Recode Values

```{r}
# Create a named vector for replacements
replace_map <- c(
  "1" = "1",    # Avoiding social gatherings
  "19" = "2",   # Avoiding introducing the baby to others
  "21" = "3",   # Cancelling/changing baby welcoming/religious events
  "6" = "4",    # Maintaining a 6 foot distance from others
  "3" = "5",    # Working from home
  "20" = "6",   # Avoiding outside childcare help
  "4" = "7",    # Only going outside for essentials or exercise
  "13" = "8",   # Cancelled or reduced medical care appointments
  "7" = "9",    # Cancelled trips or events
  "10" = "10",  # Changed your own hygiene habits
  "22" = "11",  # Changing baby care habits
  "15" = "12",  # Wearing a mask when visiting businesses
  "16" = "13",  # Wearing a mask whenever in public
  "18" = "14",  # Getting essentials delivered
  "14" = "15"   # Other
)

# Apply the replacements
df <- df %>%
  mutate(MRI_COVID_precautions.6pp = MRI_COVID_precautions.6pp %>%
           str_split(",") %>%  # Split the string into individual numbers
           map(~replace_map[.x]) %>%  # Replace each number using replace_map
           map_chr(~paste(.x, collapse = ","))) %>% # Combine back into a string
  mutate(MRI_COVID_precautions.6pp = na_if(MRI_COVID_precautions.6pp, "NA")) # convert "NA" to NA
```

#### Split up Multi-Select

```{r}
df <- df %>%
  separate_wider_delim(MRI_COVID_precautions.6pp, 
  delim = ",", 
  names = paste0("MRI_COVID_precautions_", 1:14, ".6pp"),
  too_few = "align_start")
```

#### Recode `Contracted`

```{r}
df <- df %>%
  mutate(MRI_COVID_contracted.6pp = case_when(
    MRI_COVID_contracted.6pp == 1 ~ 1, #yes, tested
    MRI_COVID_contracted.6pp == 3 ~ 2, #yes, not tested
    MRI_COVID_contracted.6pp == 4 ~ 0, #no
    .default = NA)) 
```

#### Clean up columns

-   Arrange to be in same order as non-MRI COVID Questions

```{r}
df <- df %>%
  relocate(
    contains("MRI_COVID_impact"), contains("MRI_COVID_contact"),
    MRI_COVID_social.6pp, MRI_COVID_mh.6pp, MRI_COVID_contracted.6pp, 
    # New item for MRI questionnaire
    MRI_COVID_precautions_intensity.6pp, 
    .after = MRI_COVID_precautions_14.6pp)
```
:::

### Label

#### Label `Precautions`

```{r}
# Define the labels with the new numbering (1-11)
vec_labels <- c(
  "Avoiding social gatherings" = 1,
  "Avoiding introducing the baby to others" = 2,
  "Cancelling/changing baby welcoming/religious events" = 3,
  "Maintaining a 6 foot distance from others" = 4,
  "Working from home" = 5,
  "Avoiding outside childcare help" = 6,
  "Only going outside for essentials or exercise" = 7,
  "Cancelled or reduced medical care appointments" = 8,
  "Cancelled trips or events" = 9,
  "Changed your own hygiene habits" = 10,
  "Changing baby care habits" = 11,
  "Wearing a mask when visiting businesses" = 12,
  "Wearing a mask whenever in public" = 13,
  "Getting essentials delivered" = 14,
  "Other" = 15
)

# Apply labels
df <- df %>%
  mutate(across(MRI_COVID_precautions_1.6pp:MRI_COVID_precautions_14.6pp, ~as.numeric(.x))) %>%
  mutate(across(MRI_COVID_precautions_1.6pp:MRI_COVID_precautions_14.6pp, 
                ~ labelled(., 
                           labels = vec_labels,
                           label = "What precautions have you taken to avoid COVID-19 (multi-select; COVID MRI Questions)?")))
```

#### Label `Impact`

```{r}
# Define the labels with new numbering
vec_labels <- c(
  "Lost my job" = 1,
  "Changes to my job" = 2,
  "Changes in partner's employment" = 3,
  "Decrease in household income" = 4,
  "Pregnancy or postpartum health concerns" = 5,
  "Decreased number of prenatal or postpartum care visits" = 6,
  "One or more remote healthcare visits" = 7,
  "Change in birth plan" = 8,
  "Decreased exercise due to COVID-19 constraints" = 9,
  "Worry about contracting COVID-19" = 10,
  "Worry about a family member's health" = 11,
  "Death of someone I am close to" = 12,
  "Loneliness" = 13,
  "Boredom" = 14
)

# Apply labels to COVID_impact without altering the original strings
df <- df %>%
  mutate(across(MRI_COVID_impact_1.6pp:MRI_COVID_impact_7.6pp, ~as.numeric(.x))) %>%
  mutate(across(MRI_COVID_impact_1.6pp:MRI_COVID_impact_7.6pp, 
                ~ labelled(., 
                           labels = vec_labels,
                           label = "What has occurred since your baby's birth as a result of COVID-19? (multi-select; COVID MRI Questions)")))
```

#### Label `Contact`

```{r}
vec_labels <- c("Much less" = 1, 
                "Somewhat less" = 2, 
                "About the same" = 3, 
                "Somewhat more" = 4, 
                "Much more" = 5)

df <- df %>%
  mutate(MRI_COVID_contact1.6pp = 
           labelled(MRI_COVID_contact1.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with neighbors/community members? (COVID MRI Questions)")) %>%
  mutate(MRI_COVID_contact2.6pp = 
           labelled(MRI_COVID_contact2.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with coworkers? (COVID MRI Questions)")) %>%
  mutate(MRI_COVID_contact3.6pp = 
           labelled(MRI_COVID_contact3.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with close friends? (COVID MRI Questions)")) %>%
  mutate(MRI_COVID_contact4.6pp = 
           labelled(MRI_COVID_contact4.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with your family? (COVID MRI Questions)")) %>%
  mutate(MRI_COVID_contact5.6pp = 
           labelled(MRI_COVID_contact5.6pp, 
                    vec_labels, 
                    label = "Compared to before COVID, how much contact do you have with your partner? (COVID MRI Questions)"))
```

#### Label `Social` and `Mental Health`

```{r}
vec_labels <- c("Very negative" = 1, 
                "Somewhat negative" = 2, 
                "No impact" = 3, 
                "Somewhat positive" = 4, 
                "Very positive" = 5)

df <- df %>%
  mutate(MRI_COVID_social.6pp = labelled(MRI_COVID_social.6pp, 
                                     vec_labels,
                                     label = "COVID's impact on your social relationships (COVID MRI Questions)")) %>%
  mutate(MRI_COVID_mh.6pp = labelled(MRI_COVID_mh.6pp, 
                                 vec_labels,
                                 label = "COVID's impact on your mental health (COVID MRI Questions)"))
```

#### Label `Contracted`

```{r}
df <- df %>%
  mutate(MRI_COVID_contracted.6pp = labelled(MRI_COVID_contracted.6pp, 
                                         c("Yes, tested/diagnosed" = 1, 
                                           "Yes, not tested/diagnosed" = 2, 
                                           "No COVID" = 0),
                                         label = "Have you contracted COVID-19 at any point since baby's birth? (COVID MRI Questions)")) 
```

#### Label `Precaution Intensity`

```{r}
df <- df %>%
  mutate(MRI_COVID_precautions_intensity.6pp = labelled(
    MRI_COVID_precautions_intensity.6pp, 
    labels = c("No special precautions" = 0,
               "Very few precautions" = 1,
               "Minimal precautions" = 2,
               "Occasional precautions" = 3,
               "Some effort to avoid risk" = 4,
               "Moderate precautions" = 5,
               "Consistent precautions" = 6,
               "Strong effort to limit contact" = 7,
               "Very cautious" = 8,
               "Strict precautions" = 9,
               "Extremely strict precautions" = 10),
    label = "How hard have you tried to avoid COVID-19 since your baby's birth? (COVID MRI Questions)"))
```

### Check and Print

:::: panel-tabset
#### Check

::: panel-tabset
##### Check Counts

```{r}
#| echo: false
# Precautions
check_categorical(df, contains("MRI_COVID_precautions")) %>% arrange(value) %>% knitr::kable()

# Impact
check_categorical(df, contains("MRI_COVID_impact")) %>% arrange(value) %>% knitr::kable()

# Contact
check_categorical(df, contains("MRI_COVID_contact")) %>% arrange(value) %>% knitr::kable()

# Social and Mental Health
check_categorical(df, (contains("MRI_COVID_social") | contains("MRI_COVID_mh"))) %>% arrange(value) %>% knitr::kable()

# Contract and Baby
check_categorical(df, MRI_COVID_contracted.6pp) %>% arrange(value) %>% knitr::kable()

# Precautions Intensity
check_categorical(df, MRI_COVID_precautions_intensity.6pp) %>% arrange(value) %>% knitr::kable()
```

##### Check Variable Labels

```{r}
#| echo: false
inspect_labels(df, contains("MRI_COVID")) 
```
:::

### Print

```{r}
#| echo: false
print_slice(filter(df, !is.na(MRI_COVID_precautions_1.6pp)), contains("MRI_COVID")) 
```
::::
::::::

# Finishing Up

::: panel-tabset
## Clean Up

```{r}
df <- df %>%
  # Re-order Columns
  relocate(c(
    
    # Demographics
    Parent:Childcare.6pp,
    
    # Inventories
    starts_with("AAS"), 
    starts_with("ASQ"),
    starts_with("BCQ"),
    starts_with("BDI"),
    starts_with("COPE"), 
    starts_with("DAS"), 
    starts_with("EPDS"), 
    starts_with("IBQR"),
    starts_with("ISS"),
    starts_with("LAPR"),
    starts_with("MAI"), 
    starts_with("MAT"), 
    starts_with("PBQ"), 
    starts_with("PingSS"), 
    starts_with("PSI"), 
    starts_with("PSQI"), 
    starts_with("PSS"), 
    starts_with("PYB"),
    starts_with("SCL"), 
    starts_with("STAI"),
    
    # HATCH-Designed Questions
    starts_with("PRQ"),
    starts_with("COVID"), 
    starts_with("LifeExperience"),
    
    # COVID MRI Questions
    MRI_VisitDate.6pp, 
    MRI_RelStat.6pp:MRI_HouseholdN.6pp,
    MRI_LiveWBaby.6pp:MRI_SleepTrainDays.6pp ,
    starts_with("MRI_PRQ"), 
    starts_with("MRI_PSQI"), 
    starts_with("MRI_PYB"), 
    starts_with("MRI_COVID")
    ),
.after = CoupleID) %>%
  
  select(-'2')

```

## Create Summary File

```{r}
df_sum <- df %>%
  select(
    
    # Demographics
    Parent:Childcare.6pp,
    
    # Inventories
    AAS_close.6pp:AAS_anx.6pp, 
    ASQ6_comm.6pp:ASQ6_social.6pp,
    BCQ_structure.6pp, BCQ_attune.6pp,
    BDI_tot.6pp, 
    COPE_dist.6pp:COPE_blame.6pp,
    DAS_con.6pp:DAS_tot.6pp, 
    EPDS_tot.6pp,
    IBQR_surgency.6pp:IBQR_effcontrol.6pp,
    ISS_tot.6pp, 
    LAPR_pur.6pp, LAPR_coh.6pp, LAPR_pmi.6pp,
    MAI_tot.6pp, 
    MAT_tot.6pp,
    PBQ_impaired.6pp:PBQ_abuse.6pp, 
    PingSS_tot.6pp, 
    PSI_dr.6pp:PSI_tot.6pp, PSQI_global.6pp,
    PSS_tot.6pp, 
    PYB_se.6pp:PYB_tot.6pp,
    SCL_som.6pp:SCL_psdi.6pp, 
    STAI_state.6pp, 
    
    # HATCH-Designed Questionnaires
    starts_with("PRQ"),
    starts_with("COVID"), 
    starts_with("LifeExperience"),
    
    # COVID MRI Questions
    MRI_VisitDate.6pp, 
    MRI_RelStat.6pp:MRI_HouseholdN.6pp,
    MRI_LiveWBaby.6pp:MRI_SleepTrainDays.6pp,
    starts_with("MRI_PRQ"),
    MRI_PSQI_global.6pp,
    MRI_PYB_se.6pp:MRI_PYB_tot.6pp, 
    starts_with("MRI_COVID"))
```

## Write SAV Files

```{r}
write_sav(df, here("data/5_complete", "6pp_complete.sav"))
write_sav(df_sum, here("data/6_summary", "6pp_summary.sav"))
```
:::
